--Projeto de Circuitos Digitais
--Alunos: Cassio Meira Silva
--		  	 Dionleno Silva Oliveira
--Inicio  28/03/18
--Termino 28/03/18

library IEEE; --Adicionadno Biblioteca IEEE
use IEEE.std_logic_1164.all; --Incluindo toda a biblioteca do padrao 1164

entity UC is
port(
		clk : in std_logic;
		
		opcode : in std_logic_vector(5 downto 0); --Instrucao
		
		RegDst : out std_logic;
		DVI : out std_logic;
		DvC : out std_logic;
		LerMem : out std_logic;
		MemParaReg : out std_logic;
		ULAOp : out std_logic_vector(1 downto 0);
		EscMem : out std_logic;
		ULAFonte : out std_logic;
		EscReg : out std_logic;
		
		estado : out std_logic_vector(3 downto 0) 
	  );
end UC;


--Instrucao do tipo R
-- 1. Busca da instrucao na memoria de instrucoes e incremento do PC
-- 2. Leitura dos registradores 1 e 2
-- 3. A ULA opera sobre os dados lidos
-- 4. O resultado eh escrito no banco de registradores

--Instrucao do tipo I
-- 1. Busca da instrucao na memoria de instrucoes e incremento do PC
-- 2. Leitura do conteudo do registrador 1
-- 3. Calculo da soma do valor lido com o resultado da extensao (deslocamento)
-- 4. O resultado da soma eh usado para enderecar a memoria de dados
-- 5. O dado vindo da unidade de memoria eh escrito no banco de registradores

--Instrucao Branch Equal
-- 1. Busca da instrucao na memoria de instrucoes e incremento do PC
-- 2. Leitura do conteudo dos registradores 1 e 2
-- 3. Realizacao de uma subtracao pela ULA sobre os dois valores. O valor de PC+4 eh
--		somado ao resultado da extensao do sinal dos 16 bits menos significativos da instrucao (deslocamento)
--		deslocado de dois bits a esquerda. O resultado dessa soma eh o endereco alvo do desvio.
-- 4. A saida "zero" da ULA eh usada para decidir se o PC deve ser atualizado com o valor de PC+4 ou
--		com o valor do endereco-alvo do desvio condicional.

architecture hardware of UC is
	
	constant TIPO_R: std_logic_vector(5 downto 0) := "000000";
	constant BEQ   : std_logic_vector(5 downto 0) := "000100";
	constant SW    : std_logic_vector(5 downto 0) := "101011";
	constant LW    : std_logic_vector(5 downto 0) := "100101";
	constant JUMP  : std_logic_vector(5 downto 0) := "000010";
	constant ADD   : std_logic_vector(5 downto 0) := "100000"; --???
	constant SUB   : std_logic_vector(5 downto 0) := "100010"; --???
	constant OAND  : std_logic_vector(5 downto 0) := "100100"; --???
	constant OOR   : std_logic_vector(5 downto 0) := "100101"; --???
	
	
	

	type estados is(busca_instrucao, decodificacao_instrucao, calculo_endereco_memoria,
					 execucao, fim_desvio_condicional, fim_desvio_incondicional,
					 fim_instrucao_r, acesso_memoria_leitura, acesso_memoria_escrita, 
					 passo_escrita);
					 
	--signal estado_atual, proximo_estado: estados; -- estado atual e qual o proximo estado da maquina
	signal estado_atual : estados := busca_instrucao;
	signal proximo_estado : estados := busca_instrucao;	
					 					 
-- MAQUINA DE ESTADOS

-- decodificacao_instrucao  -> (LW/SW)  -> calculo_endereco_memoria				 
-- decodificacao_instrucao  -> (TIPO_R) -> execucao
-- decodificacao_instrucao  -> (BEQ)    -> fim_desvio_condicional
-- decodificacao_instrucao  -> (JUMP)   -> fim_desvio_incondicional	
-- calculo_endereco_memoria -> (LW)	    -> acesso_memoria_leitura
-- calculo_endereco_memoria -> (SW)     -> acesso_memoria_escrita
-- execucao                 -> () -> fim_instrucao_r
-- acesso_memoria_leitura   -> () -> passo_escrita
-- passo_escrita            -> () -> busca_instrucao
-- acesso_memoria_escrita   -> () -> busca_instrucao
-- fim_instrucao_r          -> () -> busca_instrucao
-- fim_desvio_condicional   -> () -> busca_instrucao
-- fim_desvio_incondicional -> () -> busca_instrucao
					 
					 

begin
	
	-- Processo para alterar estado atual
	process(clk)
	begin
		if(clk'event and clk = '1') then 
			estado_atual <= proximo_estado;
		end if;
	end process;
	
	
	-- Processo que controla a maquina de estados
	maquina_estados: process(clk, opcode)
	begin
		if(clk'event and clk = '1') then
			
			case(opcode) is
				when TIPO_R => --INSTRUCAO ADD/SUB [TIPO R]
					case(estado_atual) is
						
						when busca_instrucao => estado <= "0000";
							RegDst     <= '0';
				         DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';--AQUI
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '0';--AQUI
							EscReg     <= '0';
							proximo_estado <= decodificacao_instrucao;
						
						when decodificacao_instrucao => estado <= "0001";
							RegDst     <= '0';
				         DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';--AQUI
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '0';--AQUI
							EscReg     <= '0';
							proximo_estado<= execucao;
							
						when execucao => estado <= "0110";	
							RegDst     <= '0';
				         DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';--AQUI
							ULAOp      <= "10";--AUI
							EscMem     <= '0';
							ULAFonte   <= '0';--AQUI
							EscReg     <= '0';
							proximo_estado<= fim_instrucao_r;
							
						when fim_instrucao_r =>	estado <= "0111";
				 			RegDst     <= '1';--AQUI
				         DVI        <= '0';
				   		DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';--AQUI
							ULAOp      <= "10";--AQUI
							EscMem     <= '0';
							ULAFonte   <= '0';--AQUI
							EscReg     <= '1';--AQUI
							proximo_estado<= busca_instrucao;
							
						when others => proximo_estado<= estado_atual;
					end case;
					
				
				
				when BEQ =>    --INSTRUCAO BEQ [TIPO I]
					case(estado_atual) is
						
						when busca_instrucao => estado <= "0000";
							RegDst     <= 'X';
				         DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "00";
							EscMem     <= '0';	
							ULAFonte   <= '0';
							EscReg     <= '0';
						   proximo_estado <= decodificacao_instrucao;
						
						when decodificacao_instrucao => estado <= "0001";
							RegDst     <= 'X';
				         DVI        <= '0';
							DvC        <= '1';--AQUI
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "01";--AQUI
							EscMem     <= '0';	
							ULAFonte   <= '0';
							EscReg     <= '0';
							proximo_estado<= fim_desvio_condicional;
						
						when fim_desvio_condicional => estado <= "1000";
							RegDst     <= 'X';
				         DVI        <= '0';
							DvC        <= '1';--AQUI
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "01"; --subtracao
							EscMem     <= '0';	
							ULAFonte   <= '0';
							EscReg     <= '0';
							proximo_estado<= busca_instrucao;
						
						when others => proximo_estado<= estado_atual;
					end case;
					
				
				
				when SW =>     --INSTRUCAO SW [TIPO I]
					case(estado_atual) is
						
						when busca_instrucao => estado <= "0000";
							RegDst     <= 'X';
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '0';
							EscReg     <= '0';
							proximo_estado <= decodificacao_instrucao;
						
						when decodificacao_instrucao => estado <= "0001";
							RegDst     <= 'X';
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
							EscReg     <= '0';
							proximo_estado<= calculo_endereco_memoria;
							
						when calculo_endereco_memoria => estado <= "0010";
			   			RegDst     <= 'X';
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
							EscReg     <= '0';
							proximo_estado<= acesso_memoria_escrita;
							
						when acesso_memoria_escrita => estado <= "0101";
			 				RegDst     <= 'X';
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "00";
							EscMem     <= '1';--AQUI
							ULAFonte   <= '0';
							EscReg     <= '0';
							proximo_estado<= busca_instrucao;
							
						when others => proximo_estado<= estado_atual;
					end case;

				
				when LW =>     --INSTRUCAO LW [TUPO I]
					case(estado_atual) is
					
						when busca_instrucao => estado <= "0000";
	   					RegDst     <= '0';--AQUI
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
							EscReg     <= '0';
							proximo_estado <= decodificacao_instrucao;
						
						when decodificacao_instrucao => estado <= "0001";
	   					RegDst     <= '0';--AQUI
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '0';
							MemParaReg <= '0';
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
							EscReg     <= '0';
							proximo_estado<= calculo_endereco_memoria;
						
						when calculo_endereco_memoria => estado <= "0010";
	   					RegDst     <= '0';--AQUI
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '1';--AQUI
							MemParaReg <= '0';
							ULAOp      <= "00";--AQUI
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
			   			EscReg     <= '0';
							proximo_estado<= acesso_memoria_leitura;
							
						when acesso_memoria_leitura => estado <= "0011";
	   					RegDst     <= '0';--AQUI
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '1';--AQUI
							MemParaReg <= '1';--AQUI
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '1';--AQUI
							EscReg     <= '0';
							proximo_estado<= passo_escrita;
							
						when passo_escrita => estado <= "0100";
	   					RegDst     <= '0';
			            DVI        <= '0';
							DvC        <= '0';
							LerMem     <= '1';--AQUI
							MemParaReg <= '1';--AQUI
							ULAOp      <= "00";
							EscMem     <= '0';
							ULAFonte   <= '0';
							EscReg     <= '1';--AQUI
							proximo_estado<= busca_instrucao;
						
						when others => proximo_estado<= estado_atual;
					end case;
			
				
				
				when JUMP =>   --INSTRUCAO JUMP [TIPO J]
					case(estado_atual) is
						
						when busca_instrucao => estado <= "0000";
							RegDst     <= 'X';
			      	   DVI        <= '0';
							DvC        <= 'X';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "XX";
							EscMem     <= '0';
							ULAFonte   <= 'X';
							EscReg     <= '0';
							proximo_estado <= decodificacao_instrucao;
						
						when decodificacao_instrucao => estado <= "0001";
							RegDst     <= 'X';
			       	   DVI        <= '1';--AQUI
							DvC        <= 'X';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "XX";
							EscMem     <= '0';
							ULAFonte   <= 'X';
							EscReg     <= '0';
							proximo_estado<= fim_desvio_incondicional;
							
						when fim_desvio_incondicional => estado <= "1001";
							RegDst     <= 'X';
			      	   DVI        <= '1';--AQUI
							DvC        <= 'X';
							LerMem     <= '0';
							MemParaReg <= 'X';
							ULAOp      <= "XX";
							EscMem     <= '0';
							ULAFonte   <= 'X';
							EscReg     <= '0';
							proximo_estado<= busca_instrucao;
							
						when others => proximo_estado <= estado_atual;
					end case;
								
				
				when others => proximo_estado <= busca_instrucao;				
			end case;
		
		end if;
			
	end process;


end hardware;