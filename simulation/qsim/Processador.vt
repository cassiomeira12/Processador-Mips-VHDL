// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/13/2018 23:21:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_sample_tst(
	clk,
	data_write_registrador,
	sel_data_write,
	sampler_tx
);
input  clk;
input [31:0] data_write_registrador;
input  sel_data_write;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_write_registrador or sel_data_write)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processador_vlg_check_tst (
	dados_lido,
	data_write,
	DvC,
	DVI,
	enable_opcode,
	enable_PC,
	enableInstrucao,
	EscMem,
	EscReg,
	estado,
	instrucao_atual,
	LerMem,
	MemParaReg,
	opcode_instrucao,
	PC_Novo,
	read_data_1,
	read_data_2,
	resultadoULA,
	sel,
	ULA_Fonte,
	ULA_Operation,
	write_register,
	sampler_rx
);
input [31:0] dados_lido;
input [31:0] data_write;
input  DvC;
input  DVI;
input  enable_opcode;
input  enable_PC;
input  enableInstrucao;
input  EscMem;
input  EscReg;
input [3:0] estado;
input [31:0] instrucao_atual;
input  LerMem;
input  MemParaReg;
input [5:0] opcode_instrucao;
input [31:0] PC_Novo;
input [31:0] read_data_1;
input [31:0] read_data_2;
input [31:0] resultadoULA;
input  sel;
input  ULA_Fonte;
input [2:0] ULA_Operation;
input [4:0] write_register;
input sampler_rx;

reg [31:0] dados_lido_expected;
reg [31:0] data_write_expected;
reg  DvC_expected;
reg  DVI_expected;
reg  enable_opcode_expected;
reg  enable_PC_expected;
reg  enableInstrucao_expected;
reg  EscMem_expected;
reg  EscReg_expected;
reg [3:0] estado_expected;
reg [31:0] instrucao_atual_expected;
reg  LerMem_expected;
reg  MemParaReg_expected;
reg [5:0] opcode_instrucao_expected;
reg [31:0] PC_Novo_expected;
reg [31:0] read_data_1_expected;
reg [31:0] read_data_2_expected;
reg [31:0] resultadoULA_expected;
reg  sel_expected;
reg  ULA_Fonte_expected;
reg [2:0] ULA_Operation_expected;
reg [4:0] write_register_expected;

reg [31:0] dados_lido_prev;
reg [31:0] data_write_prev;
reg  DvC_prev;
reg  DVI_prev;
reg  enable_opcode_prev;
reg  enable_PC_prev;
reg  enableInstrucao_prev;
reg  EscMem_prev;
reg  EscReg_prev;
reg [3:0] estado_prev;
reg [31:0] instrucao_atual_prev;
reg  LerMem_prev;
reg  MemParaReg_prev;
reg [5:0] opcode_instrucao_prev;
reg [31:0] PC_Novo_prev;
reg [31:0] read_data_1_prev;
reg [31:0] read_data_2_prev;
reg [31:0] resultadoULA_prev;
reg  sel_prev;
reg  ULA_Fonte_prev;
reg [2:0] ULA_Operation_prev;
reg [4:0] write_register_prev;

reg [31:0] dados_lido_expected_prev;
reg [31:0] data_write_expected_prev;
reg  DvC_expected_prev;
reg  DVI_expected_prev;
reg  enable_opcode_expected_prev;
reg  enable_PC_expected_prev;
reg  enableInstrucao_expected_prev;
reg  EscMem_expected_prev;
reg  EscReg_expected_prev;
reg [3:0] estado_expected_prev;
reg [31:0] instrucao_atual_expected_prev;
reg  LerMem_expected_prev;
reg  MemParaReg_expected_prev;
reg [5:0] opcode_instrucao_expected_prev;
reg [31:0] PC_Novo_expected_prev;
reg [31:0] read_data_1_expected_prev;
reg [31:0] read_data_2_expected_prev;
reg [31:0] resultadoULA_expected_prev;
reg  sel_expected_prev;
reg  ULA_Fonte_expected_prev;
reg [2:0] ULA_Operation_expected_prev;
reg [4:0] write_register_expected_prev;

reg [31:0] last_dados_lido_exp;
reg [31:0] last_data_write_exp;
reg  last_DvC_exp;
reg  last_DVI_exp;
reg  last_enable_opcode_exp;
reg  last_enable_PC_exp;
reg  last_enableInstrucao_exp;
reg  last_EscMem_exp;
reg  last_EscReg_exp;
reg [3:0] last_estado_exp;
reg [31:0] last_instrucao_atual_exp;
reg  last_LerMem_exp;
reg  last_MemParaReg_exp;
reg [5:0] last_opcode_instrucao_exp;
reg [31:0] last_PC_Novo_exp;
reg [31:0] last_read_data_1_exp;
reg [31:0] last_read_data_2_exp;
reg [31:0] last_resultadoULA_exp;
reg  last_sel_exp;
reg  last_ULA_Fonte_exp;
reg [2:0] last_ULA_Operation_exp;
reg [4:0] last_write_register_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	dados_lido_prev = dados_lido;
	data_write_prev = data_write;
	DvC_prev = DvC;
	DVI_prev = DVI;
	enable_opcode_prev = enable_opcode;
	enable_PC_prev = enable_PC;
	enableInstrucao_prev = enableInstrucao;
	EscMem_prev = EscMem;
	EscReg_prev = EscReg;
	estado_prev = estado;
	instrucao_atual_prev = instrucao_atual;
	LerMem_prev = LerMem;
	MemParaReg_prev = MemParaReg;
	opcode_instrucao_prev = opcode_instrucao;
	PC_Novo_prev = PC_Novo;
	read_data_1_prev = read_data_1;
	read_data_2_prev = read_data_2;
	resultadoULA_prev = resultadoULA;
	sel_prev = sel;
	ULA_Fonte_prev = ULA_Fonte;
	ULA_Operation_prev = ULA_Operation;
	write_register_prev = write_register;
end

// update expected /o prevs

always @(trigger)
begin
	dados_lido_expected_prev = dados_lido_expected;
	data_write_expected_prev = data_write_expected;
	DvC_expected_prev = DvC_expected;
	DVI_expected_prev = DVI_expected;
	enable_opcode_expected_prev = enable_opcode_expected;
	enable_PC_expected_prev = enable_PC_expected;
	enableInstrucao_expected_prev = enableInstrucao_expected;
	EscMem_expected_prev = EscMem_expected;
	EscReg_expected_prev = EscReg_expected;
	estado_expected_prev = estado_expected;
	instrucao_atual_expected_prev = instrucao_atual_expected;
	LerMem_expected_prev = LerMem_expected;
	MemParaReg_expected_prev = MemParaReg_expected;
	opcode_instrucao_expected_prev = opcode_instrucao_expected;
	PC_Novo_expected_prev = PC_Novo_expected;
	read_data_1_expected_prev = read_data_1_expected;
	read_data_2_expected_prev = read_data_2_expected;
	resultadoULA_expected_prev = resultadoULA_expected;
	sel_expected_prev = sel_expected;
	ULA_Fonte_expected_prev = ULA_Fonte_expected;
	ULA_Operation_expected_prev = ULA_Operation_expected;
	write_register_expected_prev = write_register_expected;
end



// expected sel
initial
begin
	sel_expected = 1'bX;
end 

// expected enableInstrucao
initial
begin
	enableInstrucao_expected = 1'bX;
end 

// expected enable_opcode
initial
begin
	enable_opcode_expected = 1'bX;
end 

// expected enable_PC
initial
begin
	enable_PC_expected = 1'bX;
end 
// expected PC_Novo[ 31 ]
initial
begin
	PC_Novo_expected[31] = 1'bX;
end 
// expected PC_Novo[ 30 ]
initial
begin
	PC_Novo_expected[30] = 1'bX;
end 
// expected PC_Novo[ 29 ]
initial
begin
	PC_Novo_expected[29] = 1'bX;
end 
// expected PC_Novo[ 28 ]
initial
begin
	PC_Novo_expected[28] = 1'bX;
end 
// expected PC_Novo[ 27 ]
initial
begin
	PC_Novo_expected[27] = 1'bX;
end 
// expected PC_Novo[ 26 ]
initial
begin
	PC_Novo_expected[26] = 1'bX;
end 
// expected PC_Novo[ 25 ]
initial
begin
	PC_Novo_expected[25] = 1'bX;
end 
// expected PC_Novo[ 24 ]
initial
begin
	PC_Novo_expected[24] = 1'bX;
end 
// expected PC_Novo[ 23 ]
initial
begin
	PC_Novo_expected[23] = 1'bX;
end 
// expected PC_Novo[ 22 ]
initial
begin
	PC_Novo_expected[22] = 1'bX;
end 
// expected PC_Novo[ 21 ]
initial
begin
	PC_Novo_expected[21] = 1'bX;
end 
// expected PC_Novo[ 20 ]
initial
begin
	PC_Novo_expected[20] = 1'bX;
end 
// expected PC_Novo[ 19 ]
initial
begin
	PC_Novo_expected[19] = 1'bX;
end 
// expected PC_Novo[ 18 ]
initial
begin
	PC_Novo_expected[18] = 1'bX;
end 
// expected PC_Novo[ 17 ]
initial
begin
	PC_Novo_expected[17] = 1'bX;
end 
// expected PC_Novo[ 16 ]
initial
begin
	PC_Novo_expected[16] = 1'bX;
end 
// expected PC_Novo[ 15 ]
initial
begin
	PC_Novo_expected[15] = 1'bX;
end 
// expected PC_Novo[ 14 ]
initial
begin
	PC_Novo_expected[14] = 1'bX;
end 
// expected PC_Novo[ 13 ]
initial
begin
	PC_Novo_expected[13] = 1'bX;
end 
// expected PC_Novo[ 12 ]
initial
begin
	PC_Novo_expected[12] = 1'bX;
end 
// expected PC_Novo[ 11 ]
initial
begin
	PC_Novo_expected[11] = 1'bX;
end 
// expected PC_Novo[ 10 ]
initial
begin
	PC_Novo_expected[10] = 1'bX;
end 
// expected PC_Novo[ 9 ]
initial
begin
	PC_Novo_expected[9] = 1'bX;
end 
// expected PC_Novo[ 8 ]
initial
begin
	PC_Novo_expected[8] = 1'bX;
end 
// expected PC_Novo[ 7 ]
initial
begin
	PC_Novo_expected[7] = 1'bX;
end 
// expected PC_Novo[ 6 ]
initial
begin
	PC_Novo_expected[6] = 1'bX;
end 
// expected PC_Novo[ 5 ]
initial
begin
	PC_Novo_expected[5] = 1'bX;
end 
// expected PC_Novo[ 4 ]
initial
begin
	PC_Novo_expected[4] = 1'bX;
end 
// expected PC_Novo[ 3 ]
initial
begin
	PC_Novo_expected[3] = 1'bX;
end 
// expected PC_Novo[ 2 ]
initial
begin
	PC_Novo_expected[2] = 1'bX;
end 
// expected PC_Novo[ 1 ]
initial
begin
	PC_Novo_expected[1] = 1'bX;
end 
// expected PC_Novo[ 0 ]
initial
begin
	PC_Novo_expected[0] = 1'bX;
end 
// expected instrucao_atual[ 31 ]
initial
begin
	instrucao_atual_expected[31] = 1'bX;
end 
// expected instrucao_atual[ 30 ]
initial
begin
	instrucao_atual_expected[30] = 1'bX;
end 
// expected instrucao_atual[ 29 ]
initial
begin
	instrucao_atual_expected[29] = 1'bX;
end 
// expected instrucao_atual[ 28 ]
initial
begin
	instrucao_atual_expected[28] = 1'bX;
end 
// expected instrucao_atual[ 27 ]
initial
begin
	instrucao_atual_expected[27] = 1'bX;
end 
// expected instrucao_atual[ 26 ]
initial
begin
	instrucao_atual_expected[26] = 1'bX;
end 
// expected instrucao_atual[ 25 ]
initial
begin
	instrucao_atual_expected[25] = 1'bX;
end 
// expected instrucao_atual[ 24 ]
initial
begin
	instrucao_atual_expected[24] = 1'bX;
end 
// expected instrucao_atual[ 23 ]
initial
begin
	instrucao_atual_expected[23] = 1'bX;
end 
// expected instrucao_atual[ 22 ]
initial
begin
	instrucao_atual_expected[22] = 1'bX;
end 
// expected instrucao_atual[ 21 ]
initial
begin
	instrucao_atual_expected[21] = 1'bX;
end 
// expected instrucao_atual[ 20 ]
initial
begin
	instrucao_atual_expected[20] = 1'bX;
end 
// expected instrucao_atual[ 19 ]
initial
begin
	instrucao_atual_expected[19] = 1'bX;
end 
// expected instrucao_atual[ 18 ]
initial
begin
	instrucao_atual_expected[18] = 1'bX;
end 
// expected instrucao_atual[ 17 ]
initial
begin
	instrucao_atual_expected[17] = 1'bX;
end 
// expected instrucao_atual[ 16 ]
initial
begin
	instrucao_atual_expected[16] = 1'bX;
end 
// expected instrucao_atual[ 15 ]
initial
begin
	instrucao_atual_expected[15] = 1'bX;
end 
// expected instrucao_atual[ 14 ]
initial
begin
	instrucao_atual_expected[14] = 1'bX;
end 
// expected instrucao_atual[ 13 ]
initial
begin
	instrucao_atual_expected[13] = 1'bX;
end 
// expected instrucao_atual[ 12 ]
initial
begin
	instrucao_atual_expected[12] = 1'bX;
end 
// expected instrucao_atual[ 11 ]
initial
begin
	instrucao_atual_expected[11] = 1'bX;
end 
// expected instrucao_atual[ 10 ]
initial
begin
	instrucao_atual_expected[10] = 1'bX;
end 
// expected instrucao_atual[ 9 ]
initial
begin
	instrucao_atual_expected[9] = 1'bX;
end 
// expected instrucao_atual[ 8 ]
initial
begin
	instrucao_atual_expected[8] = 1'bX;
end 
// expected instrucao_atual[ 7 ]
initial
begin
	instrucao_atual_expected[7] = 1'bX;
end 
// expected instrucao_atual[ 6 ]
initial
begin
	instrucao_atual_expected[6] = 1'bX;
end 
// expected instrucao_atual[ 5 ]
initial
begin
	instrucao_atual_expected[5] = 1'bX;
end 
// expected instrucao_atual[ 4 ]
initial
begin
	instrucao_atual_expected[4] = 1'bX;
end 
// expected instrucao_atual[ 3 ]
initial
begin
	instrucao_atual_expected[3] = 1'bX;
end 
// expected instrucao_atual[ 2 ]
initial
begin
	instrucao_atual_expected[2] = 1'bX;
end 
// expected instrucao_atual[ 1 ]
initial
begin
	instrucao_atual_expected[1] = 1'bX;
end 
// expected instrucao_atual[ 0 ]
initial
begin
	instrucao_atual_expected[0] = 1'bX;
end 
// expected data_write[ 31 ]
initial
begin
	data_write_expected[31] = 1'bX;
end 
// expected data_write[ 30 ]
initial
begin
	data_write_expected[30] = 1'bX;
end 
// expected data_write[ 29 ]
initial
begin
	data_write_expected[29] = 1'bX;
end 
// expected data_write[ 28 ]
initial
begin
	data_write_expected[28] = 1'bX;
end 
// expected data_write[ 27 ]
initial
begin
	data_write_expected[27] = 1'bX;
end 
// expected data_write[ 26 ]
initial
begin
	data_write_expected[26] = 1'bX;
end 
// expected data_write[ 25 ]
initial
begin
	data_write_expected[25] = 1'bX;
end 
// expected data_write[ 24 ]
initial
begin
	data_write_expected[24] = 1'bX;
end 
// expected data_write[ 23 ]
initial
begin
	data_write_expected[23] = 1'bX;
end 
// expected data_write[ 22 ]
initial
begin
	data_write_expected[22] = 1'bX;
end 
// expected data_write[ 21 ]
initial
begin
	data_write_expected[21] = 1'bX;
end 
// expected data_write[ 20 ]
initial
begin
	data_write_expected[20] = 1'bX;
end 
// expected data_write[ 19 ]
initial
begin
	data_write_expected[19] = 1'bX;
end 
// expected data_write[ 18 ]
initial
begin
	data_write_expected[18] = 1'bX;
end 
// expected data_write[ 17 ]
initial
begin
	data_write_expected[17] = 1'bX;
end 
// expected data_write[ 16 ]
initial
begin
	data_write_expected[16] = 1'bX;
end 
// expected data_write[ 15 ]
initial
begin
	data_write_expected[15] = 1'bX;
end 
// expected data_write[ 14 ]
initial
begin
	data_write_expected[14] = 1'bX;
end 
// expected data_write[ 13 ]
initial
begin
	data_write_expected[13] = 1'bX;
end 
// expected data_write[ 12 ]
initial
begin
	data_write_expected[12] = 1'bX;
end 
// expected data_write[ 11 ]
initial
begin
	data_write_expected[11] = 1'bX;
end 
// expected data_write[ 10 ]
initial
begin
	data_write_expected[10] = 1'bX;
end 
// expected data_write[ 9 ]
initial
begin
	data_write_expected[9] = 1'bX;
end 
// expected data_write[ 8 ]
initial
begin
	data_write_expected[8] = 1'bX;
end 
// expected data_write[ 7 ]
initial
begin
	data_write_expected[7] = 1'bX;
end 
// expected data_write[ 6 ]
initial
begin
	data_write_expected[6] = 1'bX;
end 
// expected data_write[ 5 ]
initial
begin
	data_write_expected[5] = 1'bX;
end 
// expected data_write[ 4 ]
initial
begin
	data_write_expected[4] = 1'bX;
end 
// expected data_write[ 3 ]
initial
begin
	data_write_expected[3] = 1'bX;
end 
// expected data_write[ 2 ]
initial
begin
	data_write_expected[2] = 1'bX;
end 
// expected data_write[ 1 ]
initial
begin
	data_write_expected[1] = 1'bX;
end 
// expected data_write[ 0 ]
initial
begin
	data_write_expected[0] = 1'bX;
end 
// expected opcode_instrucao[ 5 ]
initial
begin
	opcode_instrucao_expected[5] = 1'bX;
end 
// expected opcode_instrucao[ 4 ]
initial
begin
	opcode_instrucao_expected[4] = 1'bX;
end 
// expected opcode_instrucao[ 3 ]
initial
begin
	opcode_instrucao_expected[3] = 1'bX;
end 
// expected opcode_instrucao[ 2 ]
initial
begin
	opcode_instrucao_expected[2] = 1'bX;
end 
// expected opcode_instrucao[ 1 ]
initial
begin
	opcode_instrucao_expected[1] = 1'bX;
end 
// expected opcode_instrucao[ 0 ]
initial
begin
	opcode_instrucao_expected[0] = 1'bX;
end 
// expected ULA_Operation[ 2 ]
initial
begin
	ULA_Operation_expected[2] = 1'bX;
end 
// expected ULA_Operation[ 1 ]
initial
begin
	ULA_Operation_expected[1] = 1'bX;
end 
// expected ULA_Operation[ 0 ]
initial
begin
	ULA_Operation_expected[0] = 1'bX;
end 

// expected ULA_Fonte
initial
begin
	ULA_Fonte_expected = 1'bX;
end 
// expected read_data_1[ 31 ]
initial
begin
	read_data_1_expected[31] = 1'bX;
end 
// expected read_data_1[ 30 ]
initial
begin
	read_data_1_expected[30] = 1'bX;
end 
// expected read_data_1[ 29 ]
initial
begin
	read_data_1_expected[29] = 1'bX;
end 
// expected read_data_1[ 28 ]
initial
begin
	read_data_1_expected[28] = 1'bX;
end 
// expected read_data_1[ 27 ]
initial
begin
	read_data_1_expected[27] = 1'bX;
end 
// expected read_data_1[ 26 ]
initial
begin
	read_data_1_expected[26] = 1'bX;
end 
// expected read_data_1[ 25 ]
initial
begin
	read_data_1_expected[25] = 1'bX;
end 
// expected read_data_1[ 24 ]
initial
begin
	read_data_1_expected[24] = 1'bX;
end 
// expected read_data_1[ 23 ]
initial
begin
	read_data_1_expected[23] = 1'bX;
end 
// expected read_data_1[ 22 ]
initial
begin
	read_data_1_expected[22] = 1'bX;
end 
// expected read_data_1[ 21 ]
initial
begin
	read_data_1_expected[21] = 1'bX;
end 
// expected read_data_1[ 20 ]
initial
begin
	read_data_1_expected[20] = 1'bX;
end 
// expected read_data_1[ 19 ]
initial
begin
	read_data_1_expected[19] = 1'bX;
end 
// expected read_data_1[ 18 ]
initial
begin
	read_data_1_expected[18] = 1'bX;
end 
// expected read_data_1[ 17 ]
initial
begin
	read_data_1_expected[17] = 1'bX;
end 
// expected read_data_1[ 16 ]
initial
begin
	read_data_1_expected[16] = 1'bX;
end 
// expected read_data_1[ 15 ]
initial
begin
	read_data_1_expected[15] = 1'bX;
end 
// expected read_data_1[ 14 ]
initial
begin
	read_data_1_expected[14] = 1'bX;
end 
// expected read_data_1[ 13 ]
initial
begin
	read_data_1_expected[13] = 1'bX;
end 
// expected read_data_1[ 12 ]
initial
begin
	read_data_1_expected[12] = 1'bX;
end 
// expected read_data_1[ 11 ]
initial
begin
	read_data_1_expected[11] = 1'bX;
end 
// expected read_data_1[ 10 ]
initial
begin
	read_data_1_expected[10] = 1'bX;
end 
// expected read_data_1[ 9 ]
initial
begin
	read_data_1_expected[9] = 1'bX;
end 
// expected read_data_1[ 8 ]
initial
begin
	read_data_1_expected[8] = 1'bX;
end 
// expected read_data_1[ 7 ]
initial
begin
	read_data_1_expected[7] = 1'bX;
end 
// expected read_data_1[ 6 ]
initial
begin
	read_data_1_expected[6] = 1'bX;
end 
// expected read_data_1[ 5 ]
initial
begin
	read_data_1_expected[5] = 1'bX;
end 
// expected read_data_1[ 4 ]
initial
begin
	read_data_1_expected[4] = 1'bX;
end 
// expected read_data_1[ 3 ]
initial
begin
	read_data_1_expected[3] = 1'bX;
end 
// expected read_data_1[ 2 ]
initial
begin
	read_data_1_expected[2] = 1'bX;
end 
// expected read_data_1[ 1 ]
initial
begin
	read_data_1_expected[1] = 1'bX;
end 
// expected read_data_1[ 0 ]
initial
begin
	read_data_1_expected[0] = 1'bX;
end 
// expected read_data_2[ 31 ]
initial
begin
	read_data_2_expected[31] = 1'bX;
end 
// expected read_data_2[ 30 ]
initial
begin
	read_data_2_expected[30] = 1'bX;
end 
// expected read_data_2[ 29 ]
initial
begin
	read_data_2_expected[29] = 1'bX;
end 
// expected read_data_2[ 28 ]
initial
begin
	read_data_2_expected[28] = 1'bX;
end 
// expected read_data_2[ 27 ]
initial
begin
	read_data_2_expected[27] = 1'bX;
end 
// expected read_data_2[ 26 ]
initial
begin
	read_data_2_expected[26] = 1'bX;
end 
// expected read_data_2[ 25 ]
initial
begin
	read_data_2_expected[25] = 1'bX;
end 
// expected read_data_2[ 24 ]
initial
begin
	read_data_2_expected[24] = 1'bX;
end 
// expected read_data_2[ 23 ]
initial
begin
	read_data_2_expected[23] = 1'bX;
end 
// expected read_data_2[ 22 ]
initial
begin
	read_data_2_expected[22] = 1'bX;
end 
// expected read_data_2[ 21 ]
initial
begin
	read_data_2_expected[21] = 1'bX;
end 
// expected read_data_2[ 20 ]
initial
begin
	read_data_2_expected[20] = 1'bX;
end 
// expected read_data_2[ 19 ]
initial
begin
	read_data_2_expected[19] = 1'bX;
end 
// expected read_data_2[ 18 ]
initial
begin
	read_data_2_expected[18] = 1'bX;
end 
// expected read_data_2[ 17 ]
initial
begin
	read_data_2_expected[17] = 1'bX;
end 
// expected read_data_2[ 16 ]
initial
begin
	read_data_2_expected[16] = 1'bX;
end 
// expected read_data_2[ 15 ]
initial
begin
	read_data_2_expected[15] = 1'bX;
end 
// expected read_data_2[ 14 ]
initial
begin
	read_data_2_expected[14] = 1'bX;
end 
// expected read_data_2[ 13 ]
initial
begin
	read_data_2_expected[13] = 1'bX;
end 
// expected read_data_2[ 12 ]
initial
begin
	read_data_2_expected[12] = 1'bX;
end 
// expected read_data_2[ 11 ]
initial
begin
	read_data_2_expected[11] = 1'bX;
end 
// expected read_data_2[ 10 ]
initial
begin
	read_data_2_expected[10] = 1'bX;
end 
// expected read_data_2[ 9 ]
initial
begin
	read_data_2_expected[9] = 1'bX;
end 
// expected read_data_2[ 8 ]
initial
begin
	read_data_2_expected[8] = 1'bX;
end 
// expected read_data_2[ 7 ]
initial
begin
	read_data_2_expected[7] = 1'bX;
end 
// expected read_data_2[ 6 ]
initial
begin
	read_data_2_expected[6] = 1'bX;
end 
// expected read_data_2[ 5 ]
initial
begin
	read_data_2_expected[5] = 1'bX;
end 
// expected read_data_2[ 4 ]
initial
begin
	read_data_2_expected[4] = 1'bX;
end 
// expected read_data_2[ 3 ]
initial
begin
	read_data_2_expected[3] = 1'bX;
end 
// expected read_data_2[ 2 ]
initial
begin
	read_data_2_expected[2] = 1'bX;
end 
// expected read_data_2[ 1 ]
initial
begin
	read_data_2_expected[1] = 1'bX;
end 
// expected read_data_2[ 0 ]
initial
begin
	read_data_2_expected[0] = 1'bX;
end 
// expected dados_lido[ 31 ]
initial
begin
	dados_lido_expected[31] = 1'bX;
end 
// expected dados_lido[ 30 ]
initial
begin
	dados_lido_expected[30] = 1'bX;
end 
// expected dados_lido[ 29 ]
initial
begin
	dados_lido_expected[29] = 1'bX;
end 
// expected dados_lido[ 28 ]
initial
begin
	dados_lido_expected[28] = 1'bX;
end 
// expected dados_lido[ 27 ]
initial
begin
	dados_lido_expected[27] = 1'bX;
end 
// expected dados_lido[ 26 ]
initial
begin
	dados_lido_expected[26] = 1'bX;
end 
// expected dados_lido[ 25 ]
initial
begin
	dados_lido_expected[25] = 1'bX;
end 
// expected dados_lido[ 24 ]
initial
begin
	dados_lido_expected[24] = 1'bX;
end 
// expected dados_lido[ 23 ]
initial
begin
	dados_lido_expected[23] = 1'bX;
end 
// expected dados_lido[ 22 ]
initial
begin
	dados_lido_expected[22] = 1'bX;
end 
// expected dados_lido[ 21 ]
initial
begin
	dados_lido_expected[21] = 1'bX;
end 
// expected dados_lido[ 20 ]
initial
begin
	dados_lido_expected[20] = 1'bX;
end 
// expected dados_lido[ 19 ]
initial
begin
	dados_lido_expected[19] = 1'bX;
end 
// expected dados_lido[ 18 ]
initial
begin
	dados_lido_expected[18] = 1'bX;
end 
// expected dados_lido[ 17 ]
initial
begin
	dados_lido_expected[17] = 1'bX;
end 
// expected dados_lido[ 16 ]
initial
begin
	dados_lido_expected[16] = 1'bX;
end 
// expected dados_lido[ 15 ]
initial
begin
	dados_lido_expected[15] = 1'bX;
end 
// expected dados_lido[ 14 ]
initial
begin
	dados_lido_expected[14] = 1'bX;
end 
// expected dados_lido[ 13 ]
initial
begin
	dados_lido_expected[13] = 1'bX;
end 
// expected dados_lido[ 12 ]
initial
begin
	dados_lido_expected[12] = 1'bX;
end 
// expected dados_lido[ 11 ]
initial
begin
	dados_lido_expected[11] = 1'bX;
end 
// expected dados_lido[ 10 ]
initial
begin
	dados_lido_expected[10] = 1'bX;
end 
// expected dados_lido[ 9 ]
initial
begin
	dados_lido_expected[9] = 1'bX;
end 
// expected dados_lido[ 8 ]
initial
begin
	dados_lido_expected[8] = 1'bX;
end 
// expected dados_lido[ 7 ]
initial
begin
	dados_lido_expected[7] = 1'bX;
end 
// expected dados_lido[ 6 ]
initial
begin
	dados_lido_expected[6] = 1'bX;
end 
// expected dados_lido[ 5 ]
initial
begin
	dados_lido_expected[5] = 1'bX;
end 
// expected dados_lido[ 4 ]
initial
begin
	dados_lido_expected[4] = 1'bX;
end 
// expected dados_lido[ 3 ]
initial
begin
	dados_lido_expected[3] = 1'bX;
end 
// expected dados_lido[ 2 ]
initial
begin
	dados_lido_expected[2] = 1'bX;
end 
// expected dados_lido[ 1 ]
initial
begin
	dados_lido_expected[1] = 1'bX;
end 
// expected dados_lido[ 0 ]
initial
begin
	dados_lido_expected[0] = 1'bX;
end 
// expected resultadoULA[ 31 ]
initial
begin
	resultadoULA_expected[31] = 1'bX;
end 
// expected resultadoULA[ 30 ]
initial
begin
	resultadoULA_expected[30] = 1'bX;
end 
// expected resultadoULA[ 29 ]
initial
begin
	resultadoULA_expected[29] = 1'bX;
end 
// expected resultadoULA[ 28 ]
initial
begin
	resultadoULA_expected[28] = 1'bX;
end 
// expected resultadoULA[ 27 ]
initial
begin
	resultadoULA_expected[27] = 1'bX;
end 
// expected resultadoULA[ 26 ]
initial
begin
	resultadoULA_expected[26] = 1'bX;
end 
// expected resultadoULA[ 25 ]
initial
begin
	resultadoULA_expected[25] = 1'bX;
end 
// expected resultadoULA[ 24 ]
initial
begin
	resultadoULA_expected[24] = 1'bX;
end 
// expected resultadoULA[ 23 ]
initial
begin
	resultadoULA_expected[23] = 1'bX;
end 
// expected resultadoULA[ 22 ]
initial
begin
	resultadoULA_expected[22] = 1'bX;
end 
// expected resultadoULA[ 21 ]
initial
begin
	resultadoULA_expected[21] = 1'bX;
end 
// expected resultadoULA[ 20 ]
initial
begin
	resultadoULA_expected[20] = 1'bX;
end 
// expected resultadoULA[ 19 ]
initial
begin
	resultadoULA_expected[19] = 1'bX;
end 
// expected resultadoULA[ 18 ]
initial
begin
	resultadoULA_expected[18] = 1'bX;
end 
// expected resultadoULA[ 17 ]
initial
begin
	resultadoULA_expected[17] = 1'bX;
end 
// expected resultadoULA[ 16 ]
initial
begin
	resultadoULA_expected[16] = 1'bX;
end 
// expected resultadoULA[ 15 ]
initial
begin
	resultadoULA_expected[15] = 1'bX;
end 
// expected resultadoULA[ 14 ]
initial
begin
	resultadoULA_expected[14] = 1'bX;
end 
// expected resultadoULA[ 13 ]
initial
begin
	resultadoULA_expected[13] = 1'bX;
end 
// expected resultadoULA[ 12 ]
initial
begin
	resultadoULA_expected[12] = 1'bX;
end 
// expected resultadoULA[ 11 ]
initial
begin
	resultadoULA_expected[11] = 1'bX;
end 
// expected resultadoULA[ 10 ]
initial
begin
	resultadoULA_expected[10] = 1'bX;
end 
// expected resultadoULA[ 9 ]
initial
begin
	resultadoULA_expected[9] = 1'bX;
end 
// expected resultadoULA[ 8 ]
initial
begin
	resultadoULA_expected[8] = 1'bX;
end 
// expected resultadoULA[ 7 ]
initial
begin
	resultadoULA_expected[7] = 1'bX;
end 
// expected resultadoULA[ 6 ]
initial
begin
	resultadoULA_expected[6] = 1'bX;
end 
// expected resultadoULA[ 5 ]
initial
begin
	resultadoULA_expected[5] = 1'bX;
end 
// expected resultadoULA[ 4 ]
initial
begin
	resultadoULA_expected[4] = 1'bX;
end 
// expected resultadoULA[ 3 ]
initial
begin
	resultadoULA_expected[3] = 1'bX;
end 
// expected resultadoULA[ 2 ]
initial
begin
	resultadoULA_expected[2] = 1'bX;
end 
// expected resultadoULA[ 1 ]
initial
begin
	resultadoULA_expected[1] = 1'bX;
end 
// expected resultadoULA[ 0 ]
initial
begin
	resultadoULA_expected[0] = 1'bX;
end 
// expected write_register[ 4 ]
initial
begin
	write_register_expected[4] = 1'bX;
end 
// expected write_register[ 3 ]
initial
begin
	write_register_expected[3] = 1'bX;
end 
// expected write_register[ 2 ]
initial
begin
	write_register_expected[2] = 1'bX;
end 
// expected write_register[ 1 ]
initial
begin
	write_register_expected[1] = 1'bX;
end 
// expected write_register[ 0 ]
initial
begin
	write_register_expected[0] = 1'bX;
end 
// expected estado[ 3 ]
initial
begin
	estado_expected[3] = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 

// expected EscReg
initial
begin
	EscReg_expected = 1'bX;
end 

// expected EscMem
initial
begin
	EscMem_expected = 1'bX;
end 

// expected LerMem
initial
begin
	LerMem_expected = 1'bX;
end 

// expected MemParaReg
initial
begin
	MemParaReg_expected = 1'bX;
end 

// expected DVI
initial
begin
	DVI_expected = 1'bX;
end 

// expected DvC
initial
begin
	DvC_expected = 1'bX;
end 
// generate trigger
always @(dados_lido_expected or dados_lido or data_write_expected or data_write or DvC_expected or DvC or DVI_expected or DVI or enable_opcode_expected or enable_opcode or enable_PC_expected or enable_PC or enableInstrucao_expected or enableInstrucao or EscMem_expected or EscMem or EscReg_expected or EscReg or estado_expected or estado or instrucao_atual_expected or instrucao_atual or LerMem_expected or LerMem or MemParaReg_expected or MemParaReg or opcode_instrucao_expected or opcode_instrucao or PC_Novo_expected or PC_Novo or read_data_1_expected or read_data_1 or read_data_2_expected or read_data_2 or resultadoULA_expected or resultadoULA or sel_expected or sel or ULA_Fonte_expected or ULA_Fonte or ULA_Operation_expected or ULA_Operation or write_register_expected or write_register)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dados_lido = %b | expected data_write = %b | expected DvC = %b | expected DVI = %b | expected enable_opcode = %b | expected enable_PC = %b | expected enableInstrucao = %b | expected EscMem = %b | expected EscReg = %b | expected estado = %b | expected instrucao_atual = %b | expected LerMem = %b | expected MemParaReg = %b | expected opcode_instrucao = %b | expected PC_Novo = %b | expected read_data_1 = %b | expected read_data_2 = %b | expected resultadoULA = %b | expected sel = %b | expected ULA_Fonte = %b | expected ULA_Operation = %b | expected write_register = %b | ",dados_lido_expected_prev,data_write_expected_prev,DvC_expected_prev,DVI_expected_prev,enable_opcode_expected_prev,enable_PC_expected_prev,enableInstrucao_expected_prev,EscMem_expected_prev,EscReg_expected_prev,estado_expected_prev,instrucao_atual_expected_prev,LerMem_expected_prev,MemParaReg_expected_prev,opcode_instrucao_expected_prev,PC_Novo_expected_prev,read_data_1_expected_prev,read_data_2_expected_prev,resultadoULA_expected_prev,sel_expected_prev,ULA_Fonte_expected_prev,ULA_Operation_expected_prev,write_register_expected_prev);
	$display("| real dados_lido = %b | real data_write = %b | real DvC = %b | real DVI = %b | real enable_opcode = %b | real enable_PC = %b | real enableInstrucao = %b | real EscMem = %b | real EscReg = %b | real estado = %b | real instrucao_atual = %b | real LerMem = %b | real MemParaReg = %b | real opcode_instrucao = %b | real PC_Novo = %b | real read_data_1 = %b | real read_data_2 = %b | real resultadoULA = %b | real sel = %b | real ULA_Fonte = %b | real ULA_Operation = %b | real write_register = %b | ",dados_lido_prev,data_write_prev,DvC_prev,DVI_prev,enable_opcode_prev,enable_PC_prev,enableInstrucao_prev,EscMem_prev,EscReg_prev,estado_prev,instrucao_atual_prev,LerMem_prev,MemParaReg_prev,opcode_instrucao_prev,PC_Novo_prev,read_data_1_prev,read_data_2_prev,resultadoULA_prev,sel_prev,ULA_Fonte_prev,ULA_Operation_prev,write_register_prev);
`endif
	if (
		( dados_lido_expected_prev[0] !== 1'bx ) && ( dados_lido_prev[0] !== dados_lido_expected_prev[0] )
		&& ((dados_lido_expected_prev[0] !== last_dados_lido_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[0] = dados_lido_expected_prev[0];
	end
	if (
		( dados_lido_expected_prev[1] !== 1'bx ) && ( dados_lido_prev[1] !== dados_lido_expected_prev[1] )
		&& ((dados_lido_expected_prev[1] !== last_dados_lido_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[1] = dados_lido_expected_prev[1];
	end
	if (
		( dados_lido_expected_prev[2] !== 1'bx ) && ( dados_lido_prev[2] !== dados_lido_expected_prev[2] )
		&& ((dados_lido_expected_prev[2] !== last_dados_lido_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[2] = dados_lido_expected_prev[2];
	end
	if (
		( dados_lido_expected_prev[3] !== 1'bx ) && ( dados_lido_prev[3] !== dados_lido_expected_prev[3] )
		&& ((dados_lido_expected_prev[3] !== last_dados_lido_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[3] = dados_lido_expected_prev[3];
	end
	if (
		( dados_lido_expected_prev[4] !== 1'bx ) && ( dados_lido_prev[4] !== dados_lido_expected_prev[4] )
		&& ((dados_lido_expected_prev[4] !== last_dados_lido_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[4] = dados_lido_expected_prev[4];
	end
	if (
		( dados_lido_expected_prev[5] !== 1'bx ) && ( dados_lido_prev[5] !== dados_lido_expected_prev[5] )
		&& ((dados_lido_expected_prev[5] !== last_dados_lido_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[5] = dados_lido_expected_prev[5];
	end
	if (
		( dados_lido_expected_prev[6] !== 1'bx ) && ( dados_lido_prev[6] !== dados_lido_expected_prev[6] )
		&& ((dados_lido_expected_prev[6] !== last_dados_lido_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[6] = dados_lido_expected_prev[6];
	end
	if (
		( dados_lido_expected_prev[7] !== 1'bx ) && ( dados_lido_prev[7] !== dados_lido_expected_prev[7] )
		&& ((dados_lido_expected_prev[7] !== last_dados_lido_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[7] = dados_lido_expected_prev[7];
	end
	if (
		( dados_lido_expected_prev[8] !== 1'bx ) && ( dados_lido_prev[8] !== dados_lido_expected_prev[8] )
		&& ((dados_lido_expected_prev[8] !== last_dados_lido_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[8] = dados_lido_expected_prev[8];
	end
	if (
		( dados_lido_expected_prev[9] !== 1'bx ) && ( dados_lido_prev[9] !== dados_lido_expected_prev[9] )
		&& ((dados_lido_expected_prev[9] !== last_dados_lido_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[9] = dados_lido_expected_prev[9];
	end
	if (
		( dados_lido_expected_prev[10] !== 1'bx ) && ( dados_lido_prev[10] !== dados_lido_expected_prev[10] )
		&& ((dados_lido_expected_prev[10] !== last_dados_lido_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[10] = dados_lido_expected_prev[10];
	end
	if (
		( dados_lido_expected_prev[11] !== 1'bx ) && ( dados_lido_prev[11] !== dados_lido_expected_prev[11] )
		&& ((dados_lido_expected_prev[11] !== last_dados_lido_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[11] = dados_lido_expected_prev[11];
	end
	if (
		( dados_lido_expected_prev[12] !== 1'bx ) && ( dados_lido_prev[12] !== dados_lido_expected_prev[12] )
		&& ((dados_lido_expected_prev[12] !== last_dados_lido_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[12] = dados_lido_expected_prev[12];
	end
	if (
		( dados_lido_expected_prev[13] !== 1'bx ) && ( dados_lido_prev[13] !== dados_lido_expected_prev[13] )
		&& ((dados_lido_expected_prev[13] !== last_dados_lido_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[13] = dados_lido_expected_prev[13];
	end
	if (
		( dados_lido_expected_prev[14] !== 1'bx ) && ( dados_lido_prev[14] !== dados_lido_expected_prev[14] )
		&& ((dados_lido_expected_prev[14] !== last_dados_lido_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[14] = dados_lido_expected_prev[14];
	end
	if (
		( dados_lido_expected_prev[15] !== 1'bx ) && ( dados_lido_prev[15] !== dados_lido_expected_prev[15] )
		&& ((dados_lido_expected_prev[15] !== last_dados_lido_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[15] = dados_lido_expected_prev[15];
	end
	if (
		( dados_lido_expected_prev[16] !== 1'bx ) && ( dados_lido_prev[16] !== dados_lido_expected_prev[16] )
		&& ((dados_lido_expected_prev[16] !== last_dados_lido_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[16] = dados_lido_expected_prev[16];
	end
	if (
		( dados_lido_expected_prev[17] !== 1'bx ) && ( dados_lido_prev[17] !== dados_lido_expected_prev[17] )
		&& ((dados_lido_expected_prev[17] !== last_dados_lido_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[17] = dados_lido_expected_prev[17];
	end
	if (
		( dados_lido_expected_prev[18] !== 1'bx ) && ( dados_lido_prev[18] !== dados_lido_expected_prev[18] )
		&& ((dados_lido_expected_prev[18] !== last_dados_lido_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[18] = dados_lido_expected_prev[18];
	end
	if (
		( dados_lido_expected_prev[19] !== 1'bx ) && ( dados_lido_prev[19] !== dados_lido_expected_prev[19] )
		&& ((dados_lido_expected_prev[19] !== last_dados_lido_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[19] = dados_lido_expected_prev[19];
	end
	if (
		( dados_lido_expected_prev[20] !== 1'bx ) && ( dados_lido_prev[20] !== dados_lido_expected_prev[20] )
		&& ((dados_lido_expected_prev[20] !== last_dados_lido_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[20] = dados_lido_expected_prev[20];
	end
	if (
		( dados_lido_expected_prev[21] !== 1'bx ) && ( dados_lido_prev[21] !== dados_lido_expected_prev[21] )
		&& ((dados_lido_expected_prev[21] !== last_dados_lido_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[21] = dados_lido_expected_prev[21];
	end
	if (
		( dados_lido_expected_prev[22] !== 1'bx ) && ( dados_lido_prev[22] !== dados_lido_expected_prev[22] )
		&& ((dados_lido_expected_prev[22] !== last_dados_lido_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[22] = dados_lido_expected_prev[22];
	end
	if (
		( dados_lido_expected_prev[23] !== 1'bx ) && ( dados_lido_prev[23] !== dados_lido_expected_prev[23] )
		&& ((dados_lido_expected_prev[23] !== last_dados_lido_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[23] = dados_lido_expected_prev[23];
	end
	if (
		( dados_lido_expected_prev[24] !== 1'bx ) && ( dados_lido_prev[24] !== dados_lido_expected_prev[24] )
		&& ((dados_lido_expected_prev[24] !== last_dados_lido_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[24] = dados_lido_expected_prev[24];
	end
	if (
		( dados_lido_expected_prev[25] !== 1'bx ) && ( dados_lido_prev[25] !== dados_lido_expected_prev[25] )
		&& ((dados_lido_expected_prev[25] !== last_dados_lido_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[25] = dados_lido_expected_prev[25];
	end
	if (
		( dados_lido_expected_prev[26] !== 1'bx ) && ( dados_lido_prev[26] !== dados_lido_expected_prev[26] )
		&& ((dados_lido_expected_prev[26] !== last_dados_lido_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[26] = dados_lido_expected_prev[26];
	end
	if (
		( dados_lido_expected_prev[27] !== 1'bx ) && ( dados_lido_prev[27] !== dados_lido_expected_prev[27] )
		&& ((dados_lido_expected_prev[27] !== last_dados_lido_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[27] = dados_lido_expected_prev[27];
	end
	if (
		( dados_lido_expected_prev[28] !== 1'bx ) && ( dados_lido_prev[28] !== dados_lido_expected_prev[28] )
		&& ((dados_lido_expected_prev[28] !== last_dados_lido_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[28] = dados_lido_expected_prev[28];
	end
	if (
		( dados_lido_expected_prev[29] !== 1'bx ) && ( dados_lido_prev[29] !== dados_lido_expected_prev[29] )
		&& ((dados_lido_expected_prev[29] !== last_dados_lido_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[29] = dados_lido_expected_prev[29];
	end
	if (
		( dados_lido_expected_prev[30] !== 1'bx ) && ( dados_lido_prev[30] !== dados_lido_expected_prev[30] )
		&& ((dados_lido_expected_prev[30] !== last_dados_lido_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[30] = dados_lido_expected_prev[30];
	end
	if (
		( dados_lido_expected_prev[31] !== 1'bx ) && ( dados_lido_prev[31] !== dados_lido_expected_prev[31] )
		&& ((dados_lido_expected_prev[31] !== last_dados_lido_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dados_lido[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dados_lido_expected_prev);
		$display ("     Real value = %b", dados_lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dados_lido_exp[31] = dados_lido_expected_prev[31];
	end
	if (
		( data_write_expected_prev[0] !== 1'bx ) && ( data_write_prev[0] !== data_write_expected_prev[0] )
		&& ((data_write_expected_prev[0] !== last_data_write_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[0] = data_write_expected_prev[0];
	end
	if (
		( data_write_expected_prev[1] !== 1'bx ) && ( data_write_prev[1] !== data_write_expected_prev[1] )
		&& ((data_write_expected_prev[1] !== last_data_write_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[1] = data_write_expected_prev[1];
	end
	if (
		( data_write_expected_prev[2] !== 1'bx ) && ( data_write_prev[2] !== data_write_expected_prev[2] )
		&& ((data_write_expected_prev[2] !== last_data_write_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[2] = data_write_expected_prev[2];
	end
	if (
		( data_write_expected_prev[3] !== 1'bx ) && ( data_write_prev[3] !== data_write_expected_prev[3] )
		&& ((data_write_expected_prev[3] !== last_data_write_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[3] = data_write_expected_prev[3];
	end
	if (
		( data_write_expected_prev[4] !== 1'bx ) && ( data_write_prev[4] !== data_write_expected_prev[4] )
		&& ((data_write_expected_prev[4] !== last_data_write_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[4] = data_write_expected_prev[4];
	end
	if (
		( data_write_expected_prev[5] !== 1'bx ) && ( data_write_prev[5] !== data_write_expected_prev[5] )
		&& ((data_write_expected_prev[5] !== last_data_write_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[5] = data_write_expected_prev[5];
	end
	if (
		( data_write_expected_prev[6] !== 1'bx ) && ( data_write_prev[6] !== data_write_expected_prev[6] )
		&& ((data_write_expected_prev[6] !== last_data_write_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[6] = data_write_expected_prev[6];
	end
	if (
		( data_write_expected_prev[7] !== 1'bx ) && ( data_write_prev[7] !== data_write_expected_prev[7] )
		&& ((data_write_expected_prev[7] !== last_data_write_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[7] = data_write_expected_prev[7];
	end
	if (
		( data_write_expected_prev[8] !== 1'bx ) && ( data_write_prev[8] !== data_write_expected_prev[8] )
		&& ((data_write_expected_prev[8] !== last_data_write_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[8] = data_write_expected_prev[8];
	end
	if (
		( data_write_expected_prev[9] !== 1'bx ) && ( data_write_prev[9] !== data_write_expected_prev[9] )
		&& ((data_write_expected_prev[9] !== last_data_write_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[9] = data_write_expected_prev[9];
	end
	if (
		( data_write_expected_prev[10] !== 1'bx ) && ( data_write_prev[10] !== data_write_expected_prev[10] )
		&& ((data_write_expected_prev[10] !== last_data_write_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[10] = data_write_expected_prev[10];
	end
	if (
		( data_write_expected_prev[11] !== 1'bx ) && ( data_write_prev[11] !== data_write_expected_prev[11] )
		&& ((data_write_expected_prev[11] !== last_data_write_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[11] = data_write_expected_prev[11];
	end
	if (
		( data_write_expected_prev[12] !== 1'bx ) && ( data_write_prev[12] !== data_write_expected_prev[12] )
		&& ((data_write_expected_prev[12] !== last_data_write_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[12] = data_write_expected_prev[12];
	end
	if (
		( data_write_expected_prev[13] !== 1'bx ) && ( data_write_prev[13] !== data_write_expected_prev[13] )
		&& ((data_write_expected_prev[13] !== last_data_write_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[13] = data_write_expected_prev[13];
	end
	if (
		( data_write_expected_prev[14] !== 1'bx ) && ( data_write_prev[14] !== data_write_expected_prev[14] )
		&& ((data_write_expected_prev[14] !== last_data_write_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[14] = data_write_expected_prev[14];
	end
	if (
		( data_write_expected_prev[15] !== 1'bx ) && ( data_write_prev[15] !== data_write_expected_prev[15] )
		&& ((data_write_expected_prev[15] !== last_data_write_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[15] = data_write_expected_prev[15];
	end
	if (
		( data_write_expected_prev[16] !== 1'bx ) && ( data_write_prev[16] !== data_write_expected_prev[16] )
		&& ((data_write_expected_prev[16] !== last_data_write_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[16] = data_write_expected_prev[16];
	end
	if (
		( data_write_expected_prev[17] !== 1'bx ) && ( data_write_prev[17] !== data_write_expected_prev[17] )
		&& ((data_write_expected_prev[17] !== last_data_write_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[17] = data_write_expected_prev[17];
	end
	if (
		( data_write_expected_prev[18] !== 1'bx ) && ( data_write_prev[18] !== data_write_expected_prev[18] )
		&& ((data_write_expected_prev[18] !== last_data_write_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[18] = data_write_expected_prev[18];
	end
	if (
		( data_write_expected_prev[19] !== 1'bx ) && ( data_write_prev[19] !== data_write_expected_prev[19] )
		&& ((data_write_expected_prev[19] !== last_data_write_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[19] = data_write_expected_prev[19];
	end
	if (
		( data_write_expected_prev[20] !== 1'bx ) && ( data_write_prev[20] !== data_write_expected_prev[20] )
		&& ((data_write_expected_prev[20] !== last_data_write_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[20] = data_write_expected_prev[20];
	end
	if (
		( data_write_expected_prev[21] !== 1'bx ) && ( data_write_prev[21] !== data_write_expected_prev[21] )
		&& ((data_write_expected_prev[21] !== last_data_write_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[21] = data_write_expected_prev[21];
	end
	if (
		( data_write_expected_prev[22] !== 1'bx ) && ( data_write_prev[22] !== data_write_expected_prev[22] )
		&& ((data_write_expected_prev[22] !== last_data_write_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[22] = data_write_expected_prev[22];
	end
	if (
		( data_write_expected_prev[23] !== 1'bx ) && ( data_write_prev[23] !== data_write_expected_prev[23] )
		&& ((data_write_expected_prev[23] !== last_data_write_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[23] = data_write_expected_prev[23];
	end
	if (
		( data_write_expected_prev[24] !== 1'bx ) && ( data_write_prev[24] !== data_write_expected_prev[24] )
		&& ((data_write_expected_prev[24] !== last_data_write_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[24] = data_write_expected_prev[24];
	end
	if (
		( data_write_expected_prev[25] !== 1'bx ) && ( data_write_prev[25] !== data_write_expected_prev[25] )
		&& ((data_write_expected_prev[25] !== last_data_write_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[25] = data_write_expected_prev[25];
	end
	if (
		( data_write_expected_prev[26] !== 1'bx ) && ( data_write_prev[26] !== data_write_expected_prev[26] )
		&& ((data_write_expected_prev[26] !== last_data_write_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[26] = data_write_expected_prev[26];
	end
	if (
		( data_write_expected_prev[27] !== 1'bx ) && ( data_write_prev[27] !== data_write_expected_prev[27] )
		&& ((data_write_expected_prev[27] !== last_data_write_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[27] = data_write_expected_prev[27];
	end
	if (
		( data_write_expected_prev[28] !== 1'bx ) && ( data_write_prev[28] !== data_write_expected_prev[28] )
		&& ((data_write_expected_prev[28] !== last_data_write_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[28] = data_write_expected_prev[28];
	end
	if (
		( data_write_expected_prev[29] !== 1'bx ) && ( data_write_prev[29] !== data_write_expected_prev[29] )
		&& ((data_write_expected_prev[29] !== last_data_write_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[29] = data_write_expected_prev[29];
	end
	if (
		( data_write_expected_prev[30] !== 1'bx ) && ( data_write_prev[30] !== data_write_expected_prev[30] )
		&& ((data_write_expected_prev[30] !== last_data_write_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[30] = data_write_expected_prev[30];
	end
	if (
		( data_write_expected_prev[31] !== 1'bx ) && ( data_write_prev[31] !== data_write_expected_prev[31] )
		&& ((data_write_expected_prev[31] !== last_data_write_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_write[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_write_expected_prev);
		$display ("     Real value = %b", data_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_write_exp[31] = data_write_expected_prev[31];
	end
	if (
		( DvC_expected_prev !== 1'bx ) && ( DvC_prev !== DvC_expected_prev )
		&& ((DvC_expected_prev !== last_DvC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DvC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DvC_expected_prev);
		$display ("     Real value = %b", DvC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DvC_exp = DvC_expected_prev;
	end
	if (
		( DVI_expected_prev !== 1'bx ) && ( DVI_prev !== DVI_expected_prev )
		&& ((DVI_expected_prev !== last_DVI_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DVI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DVI_expected_prev);
		$display ("     Real value = %b", DVI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DVI_exp = DVI_expected_prev;
	end
	if (
		( enable_opcode_expected_prev !== 1'bx ) && ( enable_opcode_prev !== enable_opcode_expected_prev )
		&& ((enable_opcode_expected_prev !== last_enable_opcode_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_opcode :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_opcode_expected_prev);
		$display ("     Real value = %b", enable_opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_enable_opcode_exp = enable_opcode_expected_prev;
	end
	if (
		( enable_PC_expected_prev !== 1'bx ) && ( enable_PC_prev !== enable_PC_expected_prev )
		&& ((enable_PC_expected_prev !== last_enable_PC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_PC_expected_prev);
		$display ("     Real value = %b", enable_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_enable_PC_exp = enable_PC_expected_prev;
	end
	if (
		( enableInstrucao_expected_prev !== 1'bx ) && ( enableInstrucao_prev !== enableInstrucao_expected_prev )
		&& ((enableInstrucao_expected_prev !== last_enableInstrucao_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enableInstrucao :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enableInstrucao_expected_prev);
		$display ("     Real value = %b", enableInstrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_enableInstrucao_exp = enableInstrucao_expected_prev;
	end
	if (
		( EscMem_expected_prev !== 1'bx ) && ( EscMem_prev !== EscMem_expected_prev )
		&& ((EscMem_expected_prev !== last_EscMem_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscMem_expected_prev);
		$display ("     Real value = %b", EscMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_EscMem_exp = EscMem_expected_prev;
	end
	if (
		( EscReg_expected_prev !== 1'bx ) && ( EscReg_prev !== EscReg_expected_prev )
		&& ((EscReg_expected_prev !== last_EscReg_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscReg_expected_prev);
		$display ("     Real value = %b", EscReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EscReg_exp = EscReg_expected_prev;
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( estado_expected_prev[3] !== 1'bx ) && ( estado_prev[3] !== estado_expected_prev[3] )
		&& ((estado_expected_prev[3] !== last_estado_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_estado_exp[3] = estado_expected_prev[3];
	end
	if (
		( instrucao_atual_expected_prev[0] !== 1'bx ) && ( instrucao_atual_prev[0] !== instrucao_atual_expected_prev[0] )
		&& ((instrucao_atual_expected_prev[0] !== last_instrucao_atual_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[0] = instrucao_atual_expected_prev[0];
	end
	if (
		( instrucao_atual_expected_prev[1] !== 1'bx ) && ( instrucao_atual_prev[1] !== instrucao_atual_expected_prev[1] )
		&& ((instrucao_atual_expected_prev[1] !== last_instrucao_atual_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[1] = instrucao_atual_expected_prev[1];
	end
	if (
		( instrucao_atual_expected_prev[2] !== 1'bx ) && ( instrucao_atual_prev[2] !== instrucao_atual_expected_prev[2] )
		&& ((instrucao_atual_expected_prev[2] !== last_instrucao_atual_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[2] = instrucao_atual_expected_prev[2];
	end
	if (
		( instrucao_atual_expected_prev[3] !== 1'bx ) && ( instrucao_atual_prev[3] !== instrucao_atual_expected_prev[3] )
		&& ((instrucao_atual_expected_prev[3] !== last_instrucao_atual_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[3] = instrucao_atual_expected_prev[3];
	end
	if (
		( instrucao_atual_expected_prev[4] !== 1'bx ) && ( instrucao_atual_prev[4] !== instrucao_atual_expected_prev[4] )
		&& ((instrucao_atual_expected_prev[4] !== last_instrucao_atual_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[4] = instrucao_atual_expected_prev[4];
	end
	if (
		( instrucao_atual_expected_prev[5] !== 1'bx ) && ( instrucao_atual_prev[5] !== instrucao_atual_expected_prev[5] )
		&& ((instrucao_atual_expected_prev[5] !== last_instrucao_atual_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[5] = instrucao_atual_expected_prev[5];
	end
	if (
		( instrucao_atual_expected_prev[6] !== 1'bx ) && ( instrucao_atual_prev[6] !== instrucao_atual_expected_prev[6] )
		&& ((instrucao_atual_expected_prev[6] !== last_instrucao_atual_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[6] = instrucao_atual_expected_prev[6];
	end
	if (
		( instrucao_atual_expected_prev[7] !== 1'bx ) && ( instrucao_atual_prev[7] !== instrucao_atual_expected_prev[7] )
		&& ((instrucao_atual_expected_prev[7] !== last_instrucao_atual_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[7] = instrucao_atual_expected_prev[7];
	end
	if (
		( instrucao_atual_expected_prev[8] !== 1'bx ) && ( instrucao_atual_prev[8] !== instrucao_atual_expected_prev[8] )
		&& ((instrucao_atual_expected_prev[8] !== last_instrucao_atual_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[8] = instrucao_atual_expected_prev[8];
	end
	if (
		( instrucao_atual_expected_prev[9] !== 1'bx ) && ( instrucao_atual_prev[9] !== instrucao_atual_expected_prev[9] )
		&& ((instrucao_atual_expected_prev[9] !== last_instrucao_atual_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[9] = instrucao_atual_expected_prev[9];
	end
	if (
		( instrucao_atual_expected_prev[10] !== 1'bx ) && ( instrucao_atual_prev[10] !== instrucao_atual_expected_prev[10] )
		&& ((instrucao_atual_expected_prev[10] !== last_instrucao_atual_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[10] = instrucao_atual_expected_prev[10];
	end
	if (
		( instrucao_atual_expected_prev[11] !== 1'bx ) && ( instrucao_atual_prev[11] !== instrucao_atual_expected_prev[11] )
		&& ((instrucao_atual_expected_prev[11] !== last_instrucao_atual_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[11] = instrucao_atual_expected_prev[11];
	end
	if (
		( instrucao_atual_expected_prev[12] !== 1'bx ) && ( instrucao_atual_prev[12] !== instrucao_atual_expected_prev[12] )
		&& ((instrucao_atual_expected_prev[12] !== last_instrucao_atual_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[12] = instrucao_atual_expected_prev[12];
	end
	if (
		( instrucao_atual_expected_prev[13] !== 1'bx ) && ( instrucao_atual_prev[13] !== instrucao_atual_expected_prev[13] )
		&& ((instrucao_atual_expected_prev[13] !== last_instrucao_atual_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[13] = instrucao_atual_expected_prev[13];
	end
	if (
		( instrucao_atual_expected_prev[14] !== 1'bx ) && ( instrucao_atual_prev[14] !== instrucao_atual_expected_prev[14] )
		&& ((instrucao_atual_expected_prev[14] !== last_instrucao_atual_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[14] = instrucao_atual_expected_prev[14];
	end
	if (
		( instrucao_atual_expected_prev[15] !== 1'bx ) && ( instrucao_atual_prev[15] !== instrucao_atual_expected_prev[15] )
		&& ((instrucao_atual_expected_prev[15] !== last_instrucao_atual_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[15] = instrucao_atual_expected_prev[15];
	end
	if (
		( instrucao_atual_expected_prev[16] !== 1'bx ) && ( instrucao_atual_prev[16] !== instrucao_atual_expected_prev[16] )
		&& ((instrucao_atual_expected_prev[16] !== last_instrucao_atual_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[16] = instrucao_atual_expected_prev[16];
	end
	if (
		( instrucao_atual_expected_prev[17] !== 1'bx ) && ( instrucao_atual_prev[17] !== instrucao_atual_expected_prev[17] )
		&& ((instrucao_atual_expected_prev[17] !== last_instrucao_atual_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[17] = instrucao_atual_expected_prev[17];
	end
	if (
		( instrucao_atual_expected_prev[18] !== 1'bx ) && ( instrucao_atual_prev[18] !== instrucao_atual_expected_prev[18] )
		&& ((instrucao_atual_expected_prev[18] !== last_instrucao_atual_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[18] = instrucao_atual_expected_prev[18];
	end
	if (
		( instrucao_atual_expected_prev[19] !== 1'bx ) && ( instrucao_atual_prev[19] !== instrucao_atual_expected_prev[19] )
		&& ((instrucao_atual_expected_prev[19] !== last_instrucao_atual_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[19] = instrucao_atual_expected_prev[19];
	end
	if (
		( instrucao_atual_expected_prev[20] !== 1'bx ) && ( instrucao_atual_prev[20] !== instrucao_atual_expected_prev[20] )
		&& ((instrucao_atual_expected_prev[20] !== last_instrucao_atual_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[20] = instrucao_atual_expected_prev[20];
	end
	if (
		( instrucao_atual_expected_prev[21] !== 1'bx ) && ( instrucao_atual_prev[21] !== instrucao_atual_expected_prev[21] )
		&& ((instrucao_atual_expected_prev[21] !== last_instrucao_atual_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[21] = instrucao_atual_expected_prev[21];
	end
	if (
		( instrucao_atual_expected_prev[22] !== 1'bx ) && ( instrucao_atual_prev[22] !== instrucao_atual_expected_prev[22] )
		&& ((instrucao_atual_expected_prev[22] !== last_instrucao_atual_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[22] = instrucao_atual_expected_prev[22];
	end
	if (
		( instrucao_atual_expected_prev[23] !== 1'bx ) && ( instrucao_atual_prev[23] !== instrucao_atual_expected_prev[23] )
		&& ((instrucao_atual_expected_prev[23] !== last_instrucao_atual_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[23] = instrucao_atual_expected_prev[23];
	end
	if (
		( instrucao_atual_expected_prev[24] !== 1'bx ) && ( instrucao_atual_prev[24] !== instrucao_atual_expected_prev[24] )
		&& ((instrucao_atual_expected_prev[24] !== last_instrucao_atual_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[24] = instrucao_atual_expected_prev[24];
	end
	if (
		( instrucao_atual_expected_prev[25] !== 1'bx ) && ( instrucao_atual_prev[25] !== instrucao_atual_expected_prev[25] )
		&& ((instrucao_atual_expected_prev[25] !== last_instrucao_atual_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[25] = instrucao_atual_expected_prev[25];
	end
	if (
		( instrucao_atual_expected_prev[26] !== 1'bx ) && ( instrucao_atual_prev[26] !== instrucao_atual_expected_prev[26] )
		&& ((instrucao_atual_expected_prev[26] !== last_instrucao_atual_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[26] = instrucao_atual_expected_prev[26];
	end
	if (
		( instrucao_atual_expected_prev[27] !== 1'bx ) && ( instrucao_atual_prev[27] !== instrucao_atual_expected_prev[27] )
		&& ((instrucao_atual_expected_prev[27] !== last_instrucao_atual_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[27] = instrucao_atual_expected_prev[27];
	end
	if (
		( instrucao_atual_expected_prev[28] !== 1'bx ) && ( instrucao_atual_prev[28] !== instrucao_atual_expected_prev[28] )
		&& ((instrucao_atual_expected_prev[28] !== last_instrucao_atual_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[28] = instrucao_atual_expected_prev[28];
	end
	if (
		( instrucao_atual_expected_prev[29] !== 1'bx ) && ( instrucao_atual_prev[29] !== instrucao_atual_expected_prev[29] )
		&& ((instrucao_atual_expected_prev[29] !== last_instrucao_atual_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[29] = instrucao_atual_expected_prev[29];
	end
	if (
		( instrucao_atual_expected_prev[30] !== 1'bx ) && ( instrucao_atual_prev[30] !== instrucao_atual_expected_prev[30] )
		&& ((instrucao_atual_expected_prev[30] !== last_instrucao_atual_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[30] = instrucao_atual_expected_prev[30];
	end
	if (
		( instrucao_atual_expected_prev[31] !== 1'bx ) && ( instrucao_atual_prev[31] !== instrucao_atual_expected_prev[31] )
		&& ((instrucao_atual_expected_prev[31] !== last_instrucao_atual_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao_atual[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_atual_expected_prev);
		$display ("     Real value = %b", instrucao_atual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_instrucao_atual_exp[31] = instrucao_atual_expected_prev[31];
	end
	if (
		( LerMem_expected_prev !== 1'bx ) && ( LerMem_prev !== LerMem_expected_prev )
		&& ((LerMem_expected_prev !== last_LerMem_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LerMem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LerMem_expected_prev);
		$display ("     Real value = %b", LerMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LerMem_exp = LerMem_expected_prev;
	end
	if (
		( MemParaReg_expected_prev !== 1'bx ) && ( MemParaReg_prev !== MemParaReg_expected_prev )
		&& ((MemParaReg_expected_prev !== last_MemParaReg_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemParaReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemParaReg_expected_prev);
		$display ("     Real value = %b", MemParaReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_MemParaReg_exp = MemParaReg_expected_prev;
	end
	if (
		( opcode_instrucao_expected_prev[0] !== 1'bx ) && ( opcode_instrucao_prev[0] !== opcode_instrucao_expected_prev[0] )
		&& ((opcode_instrucao_expected_prev[0] !== last_opcode_instrucao_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[0] = opcode_instrucao_expected_prev[0];
	end
	if (
		( opcode_instrucao_expected_prev[1] !== 1'bx ) && ( opcode_instrucao_prev[1] !== opcode_instrucao_expected_prev[1] )
		&& ((opcode_instrucao_expected_prev[1] !== last_opcode_instrucao_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[1] = opcode_instrucao_expected_prev[1];
	end
	if (
		( opcode_instrucao_expected_prev[2] !== 1'bx ) && ( opcode_instrucao_prev[2] !== opcode_instrucao_expected_prev[2] )
		&& ((opcode_instrucao_expected_prev[2] !== last_opcode_instrucao_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[2] = opcode_instrucao_expected_prev[2];
	end
	if (
		( opcode_instrucao_expected_prev[3] !== 1'bx ) && ( opcode_instrucao_prev[3] !== opcode_instrucao_expected_prev[3] )
		&& ((opcode_instrucao_expected_prev[3] !== last_opcode_instrucao_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[3] = opcode_instrucao_expected_prev[3];
	end
	if (
		( opcode_instrucao_expected_prev[4] !== 1'bx ) && ( opcode_instrucao_prev[4] !== opcode_instrucao_expected_prev[4] )
		&& ((opcode_instrucao_expected_prev[4] !== last_opcode_instrucao_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[4] = opcode_instrucao_expected_prev[4];
	end
	if (
		( opcode_instrucao_expected_prev[5] !== 1'bx ) && ( opcode_instrucao_prev[5] !== opcode_instrucao_expected_prev[5] )
		&& ((opcode_instrucao_expected_prev[5] !== last_opcode_instrucao_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_instrucao_expected_prev);
		$display ("     Real value = %b", opcode_instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_opcode_instrucao_exp[5] = opcode_instrucao_expected_prev[5];
	end
	if (
		( PC_Novo_expected_prev[0] !== 1'bx ) && ( PC_Novo_prev[0] !== PC_Novo_expected_prev[0] )
		&& ((PC_Novo_expected_prev[0] !== last_PC_Novo_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[0] = PC_Novo_expected_prev[0];
	end
	if (
		( PC_Novo_expected_prev[1] !== 1'bx ) && ( PC_Novo_prev[1] !== PC_Novo_expected_prev[1] )
		&& ((PC_Novo_expected_prev[1] !== last_PC_Novo_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[1] = PC_Novo_expected_prev[1];
	end
	if (
		( PC_Novo_expected_prev[2] !== 1'bx ) && ( PC_Novo_prev[2] !== PC_Novo_expected_prev[2] )
		&& ((PC_Novo_expected_prev[2] !== last_PC_Novo_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[2] = PC_Novo_expected_prev[2];
	end
	if (
		( PC_Novo_expected_prev[3] !== 1'bx ) && ( PC_Novo_prev[3] !== PC_Novo_expected_prev[3] )
		&& ((PC_Novo_expected_prev[3] !== last_PC_Novo_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[3] = PC_Novo_expected_prev[3];
	end
	if (
		( PC_Novo_expected_prev[4] !== 1'bx ) && ( PC_Novo_prev[4] !== PC_Novo_expected_prev[4] )
		&& ((PC_Novo_expected_prev[4] !== last_PC_Novo_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[4] = PC_Novo_expected_prev[4];
	end
	if (
		( PC_Novo_expected_prev[5] !== 1'bx ) && ( PC_Novo_prev[5] !== PC_Novo_expected_prev[5] )
		&& ((PC_Novo_expected_prev[5] !== last_PC_Novo_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[5] = PC_Novo_expected_prev[5];
	end
	if (
		( PC_Novo_expected_prev[6] !== 1'bx ) && ( PC_Novo_prev[6] !== PC_Novo_expected_prev[6] )
		&& ((PC_Novo_expected_prev[6] !== last_PC_Novo_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[6] = PC_Novo_expected_prev[6];
	end
	if (
		( PC_Novo_expected_prev[7] !== 1'bx ) && ( PC_Novo_prev[7] !== PC_Novo_expected_prev[7] )
		&& ((PC_Novo_expected_prev[7] !== last_PC_Novo_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[7] = PC_Novo_expected_prev[7];
	end
	if (
		( PC_Novo_expected_prev[8] !== 1'bx ) && ( PC_Novo_prev[8] !== PC_Novo_expected_prev[8] )
		&& ((PC_Novo_expected_prev[8] !== last_PC_Novo_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[8] = PC_Novo_expected_prev[8];
	end
	if (
		( PC_Novo_expected_prev[9] !== 1'bx ) && ( PC_Novo_prev[9] !== PC_Novo_expected_prev[9] )
		&& ((PC_Novo_expected_prev[9] !== last_PC_Novo_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[9] = PC_Novo_expected_prev[9];
	end
	if (
		( PC_Novo_expected_prev[10] !== 1'bx ) && ( PC_Novo_prev[10] !== PC_Novo_expected_prev[10] )
		&& ((PC_Novo_expected_prev[10] !== last_PC_Novo_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[10] = PC_Novo_expected_prev[10];
	end
	if (
		( PC_Novo_expected_prev[11] !== 1'bx ) && ( PC_Novo_prev[11] !== PC_Novo_expected_prev[11] )
		&& ((PC_Novo_expected_prev[11] !== last_PC_Novo_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[11] = PC_Novo_expected_prev[11];
	end
	if (
		( PC_Novo_expected_prev[12] !== 1'bx ) && ( PC_Novo_prev[12] !== PC_Novo_expected_prev[12] )
		&& ((PC_Novo_expected_prev[12] !== last_PC_Novo_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[12] = PC_Novo_expected_prev[12];
	end
	if (
		( PC_Novo_expected_prev[13] !== 1'bx ) && ( PC_Novo_prev[13] !== PC_Novo_expected_prev[13] )
		&& ((PC_Novo_expected_prev[13] !== last_PC_Novo_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[13] = PC_Novo_expected_prev[13];
	end
	if (
		( PC_Novo_expected_prev[14] !== 1'bx ) && ( PC_Novo_prev[14] !== PC_Novo_expected_prev[14] )
		&& ((PC_Novo_expected_prev[14] !== last_PC_Novo_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[14] = PC_Novo_expected_prev[14];
	end
	if (
		( PC_Novo_expected_prev[15] !== 1'bx ) && ( PC_Novo_prev[15] !== PC_Novo_expected_prev[15] )
		&& ((PC_Novo_expected_prev[15] !== last_PC_Novo_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[15] = PC_Novo_expected_prev[15];
	end
	if (
		( PC_Novo_expected_prev[16] !== 1'bx ) && ( PC_Novo_prev[16] !== PC_Novo_expected_prev[16] )
		&& ((PC_Novo_expected_prev[16] !== last_PC_Novo_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[16] = PC_Novo_expected_prev[16];
	end
	if (
		( PC_Novo_expected_prev[17] !== 1'bx ) && ( PC_Novo_prev[17] !== PC_Novo_expected_prev[17] )
		&& ((PC_Novo_expected_prev[17] !== last_PC_Novo_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[17] = PC_Novo_expected_prev[17];
	end
	if (
		( PC_Novo_expected_prev[18] !== 1'bx ) && ( PC_Novo_prev[18] !== PC_Novo_expected_prev[18] )
		&& ((PC_Novo_expected_prev[18] !== last_PC_Novo_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[18] = PC_Novo_expected_prev[18];
	end
	if (
		( PC_Novo_expected_prev[19] !== 1'bx ) && ( PC_Novo_prev[19] !== PC_Novo_expected_prev[19] )
		&& ((PC_Novo_expected_prev[19] !== last_PC_Novo_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[19] = PC_Novo_expected_prev[19];
	end
	if (
		( PC_Novo_expected_prev[20] !== 1'bx ) && ( PC_Novo_prev[20] !== PC_Novo_expected_prev[20] )
		&& ((PC_Novo_expected_prev[20] !== last_PC_Novo_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[20] = PC_Novo_expected_prev[20];
	end
	if (
		( PC_Novo_expected_prev[21] !== 1'bx ) && ( PC_Novo_prev[21] !== PC_Novo_expected_prev[21] )
		&& ((PC_Novo_expected_prev[21] !== last_PC_Novo_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[21] = PC_Novo_expected_prev[21];
	end
	if (
		( PC_Novo_expected_prev[22] !== 1'bx ) && ( PC_Novo_prev[22] !== PC_Novo_expected_prev[22] )
		&& ((PC_Novo_expected_prev[22] !== last_PC_Novo_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[22] = PC_Novo_expected_prev[22];
	end
	if (
		( PC_Novo_expected_prev[23] !== 1'bx ) && ( PC_Novo_prev[23] !== PC_Novo_expected_prev[23] )
		&& ((PC_Novo_expected_prev[23] !== last_PC_Novo_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[23] = PC_Novo_expected_prev[23];
	end
	if (
		( PC_Novo_expected_prev[24] !== 1'bx ) && ( PC_Novo_prev[24] !== PC_Novo_expected_prev[24] )
		&& ((PC_Novo_expected_prev[24] !== last_PC_Novo_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[24] = PC_Novo_expected_prev[24];
	end
	if (
		( PC_Novo_expected_prev[25] !== 1'bx ) && ( PC_Novo_prev[25] !== PC_Novo_expected_prev[25] )
		&& ((PC_Novo_expected_prev[25] !== last_PC_Novo_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[25] = PC_Novo_expected_prev[25];
	end
	if (
		( PC_Novo_expected_prev[26] !== 1'bx ) && ( PC_Novo_prev[26] !== PC_Novo_expected_prev[26] )
		&& ((PC_Novo_expected_prev[26] !== last_PC_Novo_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[26] = PC_Novo_expected_prev[26];
	end
	if (
		( PC_Novo_expected_prev[27] !== 1'bx ) && ( PC_Novo_prev[27] !== PC_Novo_expected_prev[27] )
		&& ((PC_Novo_expected_prev[27] !== last_PC_Novo_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[27] = PC_Novo_expected_prev[27];
	end
	if (
		( PC_Novo_expected_prev[28] !== 1'bx ) && ( PC_Novo_prev[28] !== PC_Novo_expected_prev[28] )
		&& ((PC_Novo_expected_prev[28] !== last_PC_Novo_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[28] = PC_Novo_expected_prev[28];
	end
	if (
		( PC_Novo_expected_prev[29] !== 1'bx ) && ( PC_Novo_prev[29] !== PC_Novo_expected_prev[29] )
		&& ((PC_Novo_expected_prev[29] !== last_PC_Novo_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[29] = PC_Novo_expected_prev[29];
	end
	if (
		( PC_Novo_expected_prev[30] !== 1'bx ) && ( PC_Novo_prev[30] !== PC_Novo_expected_prev[30] )
		&& ((PC_Novo_expected_prev[30] !== last_PC_Novo_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[30] = PC_Novo_expected_prev[30];
	end
	if (
		( PC_Novo_expected_prev[31] !== 1'bx ) && ( PC_Novo_prev[31] !== PC_Novo_expected_prev[31] )
		&& ((PC_Novo_expected_prev[31] !== last_PC_Novo_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Novo[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Novo_expected_prev);
		$display ("     Real value = %b", PC_Novo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_PC_Novo_exp[31] = PC_Novo_expected_prev[31];
	end
	if (
		( read_data_1_expected_prev[0] !== 1'bx ) && ( read_data_1_prev[0] !== read_data_1_expected_prev[0] )
		&& ((read_data_1_expected_prev[0] !== last_read_data_1_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[0] = read_data_1_expected_prev[0];
	end
	if (
		( read_data_1_expected_prev[1] !== 1'bx ) && ( read_data_1_prev[1] !== read_data_1_expected_prev[1] )
		&& ((read_data_1_expected_prev[1] !== last_read_data_1_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[1] = read_data_1_expected_prev[1];
	end
	if (
		( read_data_1_expected_prev[2] !== 1'bx ) && ( read_data_1_prev[2] !== read_data_1_expected_prev[2] )
		&& ((read_data_1_expected_prev[2] !== last_read_data_1_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[2] = read_data_1_expected_prev[2];
	end
	if (
		( read_data_1_expected_prev[3] !== 1'bx ) && ( read_data_1_prev[3] !== read_data_1_expected_prev[3] )
		&& ((read_data_1_expected_prev[3] !== last_read_data_1_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[3] = read_data_1_expected_prev[3];
	end
	if (
		( read_data_1_expected_prev[4] !== 1'bx ) && ( read_data_1_prev[4] !== read_data_1_expected_prev[4] )
		&& ((read_data_1_expected_prev[4] !== last_read_data_1_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[4] = read_data_1_expected_prev[4];
	end
	if (
		( read_data_1_expected_prev[5] !== 1'bx ) && ( read_data_1_prev[5] !== read_data_1_expected_prev[5] )
		&& ((read_data_1_expected_prev[5] !== last_read_data_1_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[5] = read_data_1_expected_prev[5];
	end
	if (
		( read_data_1_expected_prev[6] !== 1'bx ) && ( read_data_1_prev[6] !== read_data_1_expected_prev[6] )
		&& ((read_data_1_expected_prev[6] !== last_read_data_1_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[6] = read_data_1_expected_prev[6];
	end
	if (
		( read_data_1_expected_prev[7] !== 1'bx ) && ( read_data_1_prev[7] !== read_data_1_expected_prev[7] )
		&& ((read_data_1_expected_prev[7] !== last_read_data_1_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[7] = read_data_1_expected_prev[7];
	end
	if (
		( read_data_1_expected_prev[8] !== 1'bx ) && ( read_data_1_prev[8] !== read_data_1_expected_prev[8] )
		&& ((read_data_1_expected_prev[8] !== last_read_data_1_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[8] = read_data_1_expected_prev[8];
	end
	if (
		( read_data_1_expected_prev[9] !== 1'bx ) && ( read_data_1_prev[9] !== read_data_1_expected_prev[9] )
		&& ((read_data_1_expected_prev[9] !== last_read_data_1_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[9] = read_data_1_expected_prev[9];
	end
	if (
		( read_data_1_expected_prev[10] !== 1'bx ) && ( read_data_1_prev[10] !== read_data_1_expected_prev[10] )
		&& ((read_data_1_expected_prev[10] !== last_read_data_1_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[10] = read_data_1_expected_prev[10];
	end
	if (
		( read_data_1_expected_prev[11] !== 1'bx ) && ( read_data_1_prev[11] !== read_data_1_expected_prev[11] )
		&& ((read_data_1_expected_prev[11] !== last_read_data_1_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[11] = read_data_1_expected_prev[11];
	end
	if (
		( read_data_1_expected_prev[12] !== 1'bx ) && ( read_data_1_prev[12] !== read_data_1_expected_prev[12] )
		&& ((read_data_1_expected_prev[12] !== last_read_data_1_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[12] = read_data_1_expected_prev[12];
	end
	if (
		( read_data_1_expected_prev[13] !== 1'bx ) && ( read_data_1_prev[13] !== read_data_1_expected_prev[13] )
		&& ((read_data_1_expected_prev[13] !== last_read_data_1_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[13] = read_data_1_expected_prev[13];
	end
	if (
		( read_data_1_expected_prev[14] !== 1'bx ) && ( read_data_1_prev[14] !== read_data_1_expected_prev[14] )
		&& ((read_data_1_expected_prev[14] !== last_read_data_1_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[14] = read_data_1_expected_prev[14];
	end
	if (
		( read_data_1_expected_prev[15] !== 1'bx ) && ( read_data_1_prev[15] !== read_data_1_expected_prev[15] )
		&& ((read_data_1_expected_prev[15] !== last_read_data_1_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[15] = read_data_1_expected_prev[15];
	end
	if (
		( read_data_1_expected_prev[16] !== 1'bx ) && ( read_data_1_prev[16] !== read_data_1_expected_prev[16] )
		&& ((read_data_1_expected_prev[16] !== last_read_data_1_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[16] = read_data_1_expected_prev[16];
	end
	if (
		( read_data_1_expected_prev[17] !== 1'bx ) && ( read_data_1_prev[17] !== read_data_1_expected_prev[17] )
		&& ((read_data_1_expected_prev[17] !== last_read_data_1_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[17] = read_data_1_expected_prev[17];
	end
	if (
		( read_data_1_expected_prev[18] !== 1'bx ) && ( read_data_1_prev[18] !== read_data_1_expected_prev[18] )
		&& ((read_data_1_expected_prev[18] !== last_read_data_1_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[18] = read_data_1_expected_prev[18];
	end
	if (
		( read_data_1_expected_prev[19] !== 1'bx ) && ( read_data_1_prev[19] !== read_data_1_expected_prev[19] )
		&& ((read_data_1_expected_prev[19] !== last_read_data_1_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[19] = read_data_1_expected_prev[19];
	end
	if (
		( read_data_1_expected_prev[20] !== 1'bx ) && ( read_data_1_prev[20] !== read_data_1_expected_prev[20] )
		&& ((read_data_1_expected_prev[20] !== last_read_data_1_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[20] = read_data_1_expected_prev[20];
	end
	if (
		( read_data_1_expected_prev[21] !== 1'bx ) && ( read_data_1_prev[21] !== read_data_1_expected_prev[21] )
		&& ((read_data_1_expected_prev[21] !== last_read_data_1_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[21] = read_data_1_expected_prev[21];
	end
	if (
		( read_data_1_expected_prev[22] !== 1'bx ) && ( read_data_1_prev[22] !== read_data_1_expected_prev[22] )
		&& ((read_data_1_expected_prev[22] !== last_read_data_1_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[22] = read_data_1_expected_prev[22];
	end
	if (
		( read_data_1_expected_prev[23] !== 1'bx ) && ( read_data_1_prev[23] !== read_data_1_expected_prev[23] )
		&& ((read_data_1_expected_prev[23] !== last_read_data_1_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[23] = read_data_1_expected_prev[23];
	end
	if (
		( read_data_1_expected_prev[24] !== 1'bx ) && ( read_data_1_prev[24] !== read_data_1_expected_prev[24] )
		&& ((read_data_1_expected_prev[24] !== last_read_data_1_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[24] = read_data_1_expected_prev[24];
	end
	if (
		( read_data_1_expected_prev[25] !== 1'bx ) && ( read_data_1_prev[25] !== read_data_1_expected_prev[25] )
		&& ((read_data_1_expected_prev[25] !== last_read_data_1_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[25] = read_data_1_expected_prev[25];
	end
	if (
		( read_data_1_expected_prev[26] !== 1'bx ) && ( read_data_1_prev[26] !== read_data_1_expected_prev[26] )
		&& ((read_data_1_expected_prev[26] !== last_read_data_1_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[26] = read_data_1_expected_prev[26];
	end
	if (
		( read_data_1_expected_prev[27] !== 1'bx ) && ( read_data_1_prev[27] !== read_data_1_expected_prev[27] )
		&& ((read_data_1_expected_prev[27] !== last_read_data_1_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[27] = read_data_1_expected_prev[27];
	end
	if (
		( read_data_1_expected_prev[28] !== 1'bx ) && ( read_data_1_prev[28] !== read_data_1_expected_prev[28] )
		&& ((read_data_1_expected_prev[28] !== last_read_data_1_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[28] = read_data_1_expected_prev[28];
	end
	if (
		( read_data_1_expected_prev[29] !== 1'bx ) && ( read_data_1_prev[29] !== read_data_1_expected_prev[29] )
		&& ((read_data_1_expected_prev[29] !== last_read_data_1_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[29] = read_data_1_expected_prev[29];
	end
	if (
		( read_data_1_expected_prev[30] !== 1'bx ) && ( read_data_1_prev[30] !== read_data_1_expected_prev[30] )
		&& ((read_data_1_expected_prev[30] !== last_read_data_1_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[30] = read_data_1_expected_prev[30];
	end
	if (
		( read_data_1_expected_prev[31] !== 1'bx ) && ( read_data_1_prev[31] !== read_data_1_expected_prev[31] )
		&& ((read_data_1_expected_prev[31] !== last_read_data_1_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_1_expected_prev);
		$display ("     Real value = %b", read_data_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_read_data_1_exp[31] = read_data_1_expected_prev[31];
	end
	if (
		( read_data_2_expected_prev[0] !== 1'bx ) && ( read_data_2_prev[0] !== read_data_2_expected_prev[0] )
		&& ((read_data_2_expected_prev[0] !== last_read_data_2_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[0] = read_data_2_expected_prev[0];
	end
	if (
		( read_data_2_expected_prev[1] !== 1'bx ) && ( read_data_2_prev[1] !== read_data_2_expected_prev[1] )
		&& ((read_data_2_expected_prev[1] !== last_read_data_2_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[1] = read_data_2_expected_prev[1];
	end
	if (
		( read_data_2_expected_prev[2] !== 1'bx ) && ( read_data_2_prev[2] !== read_data_2_expected_prev[2] )
		&& ((read_data_2_expected_prev[2] !== last_read_data_2_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[2] = read_data_2_expected_prev[2];
	end
	if (
		( read_data_2_expected_prev[3] !== 1'bx ) && ( read_data_2_prev[3] !== read_data_2_expected_prev[3] )
		&& ((read_data_2_expected_prev[3] !== last_read_data_2_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[3] = read_data_2_expected_prev[3];
	end
	if (
		( read_data_2_expected_prev[4] !== 1'bx ) && ( read_data_2_prev[4] !== read_data_2_expected_prev[4] )
		&& ((read_data_2_expected_prev[4] !== last_read_data_2_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[4] = read_data_2_expected_prev[4];
	end
	if (
		( read_data_2_expected_prev[5] !== 1'bx ) && ( read_data_2_prev[5] !== read_data_2_expected_prev[5] )
		&& ((read_data_2_expected_prev[5] !== last_read_data_2_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[5] = read_data_2_expected_prev[5];
	end
	if (
		( read_data_2_expected_prev[6] !== 1'bx ) && ( read_data_2_prev[6] !== read_data_2_expected_prev[6] )
		&& ((read_data_2_expected_prev[6] !== last_read_data_2_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[6] = read_data_2_expected_prev[6];
	end
	if (
		( read_data_2_expected_prev[7] !== 1'bx ) && ( read_data_2_prev[7] !== read_data_2_expected_prev[7] )
		&& ((read_data_2_expected_prev[7] !== last_read_data_2_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[7] = read_data_2_expected_prev[7];
	end
	if (
		( read_data_2_expected_prev[8] !== 1'bx ) && ( read_data_2_prev[8] !== read_data_2_expected_prev[8] )
		&& ((read_data_2_expected_prev[8] !== last_read_data_2_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[8] = read_data_2_expected_prev[8];
	end
	if (
		( read_data_2_expected_prev[9] !== 1'bx ) && ( read_data_2_prev[9] !== read_data_2_expected_prev[9] )
		&& ((read_data_2_expected_prev[9] !== last_read_data_2_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[9] = read_data_2_expected_prev[9];
	end
	if (
		( read_data_2_expected_prev[10] !== 1'bx ) && ( read_data_2_prev[10] !== read_data_2_expected_prev[10] )
		&& ((read_data_2_expected_prev[10] !== last_read_data_2_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[10] = read_data_2_expected_prev[10];
	end
	if (
		( read_data_2_expected_prev[11] !== 1'bx ) && ( read_data_2_prev[11] !== read_data_2_expected_prev[11] )
		&& ((read_data_2_expected_prev[11] !== last_read_data_2_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[11] = read_data_2_expected_prev[11];
	end
	if (
		( read_data_2_expected_prev[12] !== 1'bx ) && ( read_data_2_prev[12] !== read_data_2_expected_prev[12] )
		&& ((read_data_2_expected_prev[12] !== last_read_data_2_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[12] = read_data_2_expected_prev[12];
	end
	if (
		( read_data_2_expected_prev[13] !== 1'bx ) && ( read_data_2_prev[13] !== read_data_2_expected_prev[13] )
		&& ((read_data_2_expected_prev[13] !== last_read_data_2_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[13] = read_data_2_expected_prev[13];
	end
	if (
		( read_data_2_expected_prev[14] !== 1'bx ) && ( read_data_2_prev[14] !== read_data_2_expected_prev[14] )
		&& ((read_data_2_expected_prev[14] !== last_read_data_2_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[14] = read_data_2_expected_prev[14];
	end
	if (
		( read_data_2_expected_prev[15] !== 1'bx ) && ( read_data_2_prev[15] !== read_data_2_expected_prev[15] )
		&& ((read_data_2_expected_prev[15] !== last_read_data_2_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[15] = read_data_2_expected_prev[15];
	end
	if (
		( read_data_2_expected_prev[16] !== 1'bx ) && ( read_data_2_prev[16] !== read_data_2_expected_prev[16] )
		&& ((read_data_2_expected_prev[16] !== last_read_data_2_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[16] = read_data_2_expected_prev[16];
	end
	if (
		( read_data_2_expected_prev[17] !== 1'bx ) && ( read_data_2_prev[17] !== read_data_2_expected_prev[17] )
		&& ((read_data_2_expected_prev[17] !== last_read_data_2_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[17] = read_data_2_expected_prev[17];
	end
	if (
		( read_data_2_expected_prev[18] !== 1'bx ) && ( read_data_2_prev[18] !== read_data_2_expected_prev[18] )
		&& ((read_data_2_expected_prev[18] !== last_read_data_2_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[18] = read_data_2_expected_prev[18];
	end
	if (
		( read_data_2_expected_prev[19] !== 1'bx ) && ( read_data_2_prev[19] !== read_data_2_expected_prev[19] )
		&& ((read_data_2_expected_prev[19] !== last_read_data_2_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[19] = read_data_2_expected_prev[19];
	end
	if (
		( read_data_2_expected_prev[20] !== 1'bx ) && ( read_data_2_prev[20] !== read_data_2_expected_prev[20] )
		&& ((read_data_2_expected_prev[20] !== last_read_data_2_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[20] = read_data_2_expected_prev[20];
	end
	if (
		( read_data_2_expected_prev[21] !== 1'bx ) && ( read_data_2_prev[21] !== read_data_2_expected_prev[21] )
		&& ((read_data_2_expected_prev[21] !== last_read_data_2_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[21] = read_data_2_expected_prev[21];
	end
	if (
		( read_data_2_expected_prev[22] !== 1'bx ) && ( read_data_2_prev[22] !== read_data_2_expected_prev[22] )
		&& ((read_data_2_expected_prev[22] !== last_read_data_2_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[22] = read_data_2_expected_prev[22];
	end
	if (
		( read_data_2_expected_prev[23] !== 1'bx ) && ( read_data_2_prev[23] !== read_data_2_expected_prev[23] )
		&& ((read_data_2_expected_prev[23] !== last_read_data_2_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[23] = read_data_2_expected_prev[23];
	end
	if (
		( read_data_2_expected_prev[24] !== 1'bx ) && ( read_data_2_prev[24] !== read_data_2_expected_prev[24] )
		&& ((read_data_2_expected_prev[24] !== last_read_data_2_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[24] = read_data_2_expected_prev[24];
	end
	if (
		( read_data_2_expected_prev[25] !== 1'bx ) && ( read_data_2_prev[25] !== read_data_2_expected_prev[25] )
		&& ((read_data_2_expected_prev[25] !== last_read_data_2_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[25] = read_data_2_expected_prev[25];
	end
	if (
		( read_data_2_expected_prev[26] !== 1'bx ) && ( read_data_2_prev[26] !== read_data_2_expected_prev[26] )
		&& ((read_data_2_expected_prev[26] !== last_read_data_2_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[26] = read_data_2_expected_prev[26];
	end
	if (
		( read_data_2_expected_prev[27] !== 1'bx ) && ( read_data_2_prev[27] !== read_data_2_expected_prev[27] )
		&& ((read_data_2_expected_prev[27] !== last_read_data_2_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[27] = read_data_2_expected_prev[27];
	end
	if (
		( read_data_2_expected_prev[28] !== 1'bx ) && ( read_data_2_prev[28] !== read_data_2_expected_prev[28] )
		&& ((read_data_2_expected_prev[28] !== last_read_data_2_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[28] = read_data_2_expected_prev[28];
	end
	if (
		( read_data_2_expected_prev[29] !== 1'bx ) && ( read_data_2_prev[29] !== read_data_2_expected_prev[29] )
		&& ((read_data_2_expected_prev[29] !== last_read_data_2_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[29] = read_data_2_expected_prev[29];
	end
	if (
		( read_data_2_expected_prev[30] !== 1'bx ) && ( read_data_2_prev[30] !== read_data_2_expected_prev[30] )
		&& ((read_data_2_expected_prev[30] !== last_read_data_2_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[30] = read_data_2_expected_prev[30];
	end
	if (
		( read_data_2_expected_prev[31] !== 1'bx ) && ( read_data_2_prev[31] !== read_data_2_expected_prev[31] )
		&& ((read_data_2_expected_prev[31] !== last_read_data_2_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_2_expected_prev);
		$display ("     Real value = %b", read_data_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_read_data_2_exp[31] = read_data_2_expected_prev[31];
	end
	if (
		( resultadoULA_expected_prev[0] !== 1'bx ) && ( resultadoULA_prev[0] !== resultadoULA_expected_prev[0] )
		&& ((resultadoULA_expected_prev[0] !== last_resultadoULA_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[0] = resultadoULA_expected_prev[0];
	end
	if (
		( resultadoULA_expected_prev[1] !== 1'bx ) && ( resultadoULA_prev[1] !== resultadoULA_expected_prev[1] )
		&& ((resultadoULA_expected_prev[1] !== last_resultadoULA_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[1] = resultadoULA_expected_prev[1];
	end
	if (
		( resultadoULA_expected_prev[2] !== 1'bx ) && ( resultadoULA_prev[2] !== resultadoULA_expected_prev[2] )
		&& ((resultadoULA_expected_prev[2] !== last_resultadoULA_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[2] = resultadoULA_expected_prev[2];
	end
	if (
		( resultadoULA_expected_prev[3] !== 1'bx ) && ( resultadoULA_prev[3] !== resultadoULA_expected_prev[3] )
		&& ((resultadoULA_expected_prev[3] !== last_resultadoULA_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[3] = resultadoULA_expected_prev[3];
	end
	if (
		( resultadoULA_expected_prev[4] !== 1'bx ) && ( resultadoULA_prev[4] !== resultadoULA_expected_prev[4] )
		&& ((resultadoULA_expected_prev[4] !== last_resultadoULA_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[4] = resultadoULA_expected_prev[4];
	end
	if (
		( resultadoULA_expected_prev[5] !== 1'bx ) && ( resultadoULA_prev[5] !== resultadoULA_expected_prev[5] )
		&& ((resultadoULA_expected_prev[5] !== last_resultadoULA_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[5] = resultadoULA_expected_prev[5];
	end
	if (
		( resultadoULA_expected_prev[6] !== 1'bx ) && ( resultadoULA_prev[6] !== resultadoULA_expected_prev[6] )
		&& ((resultadoULA_expected_prev[6] !== last_resultadoULA_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[6] = resultadoULA_expected_prev[6];
	end
	if (
		( resultadoULA_expected_prev[7] !== 1'bx ) && ( resultadoULA_prev[7] !== resultadoULA_expected_prev[7] )
		&& ((resultadoULA_expected_prev[7] !== last_resultadoULA_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[7] = resultadoULA_expected_prev[7];
	end
	if (
		( resultadoULA_expected_prev[8] !== 1'bx ) && ( resultadoULA_prev[8] !== resultadoULA_expected_prev[8] )
		&& ((resultadoULA_expected_prev[8] !== last_resultadoULA_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[8] = resultadoULA_expected_prev[8];
	end
	if (
		( resultadoULA_expected_prev[9] !== 1'bx ) && ( resultadoULA_prev[9] !== resultadoULA_expected_prev[9] )
		&& ((resultadoULA_expected_prev[9] !== last_resultadoULA_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[9] = resultadoULA_expected_prev[9];
	end
	if (
		( resultadoULA_expected_prev[10] !== 1'bx ) && ( resultadoULA_prev[10] !== resultadoULA_expected_prev[10] )
		&& ((resultadoULA_expected_prev[10] !== last_resultadoULA_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[10] = resultadoULA_expected_prev[10];
	end
	if (
		( resultadoULA_expected_prev[11] !== 1'bx ) && ( resultadoULA_prev[11] !== resultadoULA_expected_prev[11] )
		&& ((resultadoULA_expected_prev[11] !== last_resultadoULA_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[11] = resultadoULA_expected_prev[11];
	end
	if (
		( resultadoULA_expected_prev[12] !== 1'bx ) && ( resultadoULA_prev[12] !== resultadoULA_expected_prev[12] )
		&& ((resultadoULA_expected_prev[12] !== last_resultadoULA_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[12] = resultadoULA_expected_prev[12];
	end
	if (
		( resultadoULA_expected_prev[13] !== 1'bx ) && ( resultadoULA_prev[13] !== resultadoULA_expected_prev[13] )
		&& ((resultadoULA_expected_prev[13] !== last_resultadoULA_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[13] = resultadoULA_expected_prev[13];
	end
	if (
		( resultadoULA_expected_prev[14] !== 1'bx ) && ( resultadoULA_prev[14] !== resultadoULA_expected_prev[14] )
		&& ((resultadoULA_expected_prev[14] !== last_resultadoULA_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[14] = resultadoULA_expected_prev[14];
	end
	if (
		( resultadoULA_expected_prev[15] !== 1'bx ) && ( resultadoULA_prev[15] !== resultadoULA_expected_prev[15] )
		&& ((resultadoULA_expected_prev[15] !== last_resultadoULA_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[15] = resultadoULA_expected_prev[15];
	end
	if (
		( resultadoULA_expected_prev[16] !== 1'bx ) && ( resultadoULA_prev[16] !== resultadoULA_expected_prev[16] )
		&& ((resultadoULA_expected_prev[16] !== last_resultadoULA_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[16] = resultadoULA_expected_prev[16];
	end
	if (
		( resultadoULA_expected_prev[17] !== 1'bx ) && ( resultadoULA_prev[17] !== resultadoULA_expected_prev[17] )
		&& ((resultadoULA_expected_prev[17] !== last_resultadoULA_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[17] = resultadoULA_expected_prev[17];
	end
	if (
		( resultadoULA_expected_prev[18] !== 1'bx ) && ( resultadoULA_prev[18] !== resultadoULA_expected_prev[18] )
		&& ((resultadoULA_expected_prev[18] !== last_resultadoULA_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[18] = resultadoULA_expected_prev[18];
	end
	if (
		( resultadoULA_expected_prev[19] !== 1'bx ) && ( resultadoULA_prev[19] !== resultadoULA_expected_prev[19] )
		&& ((resultadoULA_expected_prev[19] !== last_resultadoULA_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[19] = resultadoULA_expected_prev[19];
	end
	if (
		( resultadoULA_expected_prev[20] !== 1'bx ) && ( resultadoULA_prev[20] !== resultadoULA_expected_prev[20] )
		&& ((resultadoULA_expected_prev[20] !== last_resultadoULA_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[20] = resultadoULA_expected_prev[20];
	end
	if (
		( resultadoULA_expected_prev[21] !== 1'bx ) && ( resultadoULA_prev[21] !== resultadoULA_expected_prev[21] )
		&& ((resultadoULA_expected_prev[21] !== last_resultadoULA_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[21] = resultadoULA_expected_prev[21];
	end
	if (
		( resultadoULA_expected_prev[22] !== 1'bx ) && ( resultadoULA_prev[22] !== resultadoULA_expected_prev[22] )
		&& ((resultadoULA_expected_prev[22] !== last_resultadoULA_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[22] = resultadoULA_expected_prev[22];
	end
	if (
		( resultadoULA_expected_prev[23] !== 1'bx ) && ( resultadoULA_prev[23] !== resultadoULA_expected_prev[23] )
		&& ((resultadoULA_expected_prev[23] !== last_resultadoULA_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[23] = resultadoULA_expected_prev[23];
	end
	if (
		( resultadoULA_expected_prev[24] !== 1'bx ) && ( resultadoULA_prev[24] !== resultadoULA_expected_prev[24] )
		&& ((resultadoULA_expected_prev[24] !== last_resultadoULA_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[24] = resultadoULA_expected_prev[24];
	end
	if (
		( resultadoULA_expected_prev[25] !== 1'bx ) && ( resultadoULA_prev[25] !== resultadoULA_expected_prev[25] )
		&& ((resultadoULA_expected_prev[25] !== last_resultadoULA_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[25] = resultadoULA_expected_prev[25];
	end
	if (
		( resultadoULA_expected_prev[26] !== 1'bx ) && ( resultadoULA_prev[26] !== resultadoULA_expected_prev[26] )
		&& ((resultadoULA_expected_prev[26] !== last_resultadoULA_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[26] = resultadoULA_expected_prev[26];
	end
	if (
		( resultadoULA_expected_prev[27] !== 1'bx ) && ( resultadoULA_prev[27] !== resultadoULA_expected_prev[27] )
		&& ((resultadoULA_expected_prev[27] !== last_resultadoULA_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[27] = resultadoULA_expected_prev[27];
	end
	if (
		( resultadoULA_expected_prev[28] !== 1'bx ) && ( resultadoULA_prev[28] !== resultadoULA_expected_prev[28] )
		&& ((resultadoULA_expected_prev[28] !== last_resultadoULA_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[28] = resultadoULA_expected_prev[28];
	end
	if (
		( resultadoULA_expected_prev[29] !== 1'bx ) && ( resultadoULA_prev[29] !== resultadoULA_expected_prev[29] )
		&& ((resultadoULA_expected_prev[29] !== last_resultadoULA_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[29] = resultadoULA_expected_prev[29];
	end
	if (
		( resultadoULA_expected_prev[30] !== 1'bx ) && ( resultadoULA_prev[30] !== resultadoULA_expected_prev[30] )
		&& ((resultadoULA_expected_prev[30] !== last_resultadoULA_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[30] = resultadoULA_expected_prev[30];
	end
	if (
		( resultadoULA_expected_prev[31] !== 1'bx ) && ( resultadoULA_prev[31] !== resultadoULA_expected_prev[31] )
		&& ((resultadoULA_expected_prev[31] !== last_resultadoULA_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resultadoULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resultadoULA_expected_prev);
		$display ("     Real value = %b", resultadoULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_resultadoULA_exp[31] = resultadoULA_expected_prev[31];
	end
	if (
		( sel_expected_prev !== 1'bx ) && ( sel_prev !== sel_expected_prev )
		&& ((sel_expected_prev !== last_sel_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel_expected_prev);
		$display ("     Real value = %b", sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_sel_exp = sel_expected_prev;
	end
	if (
		( ULA_Fonte_expected_prev !== 1'bx ) && ( ULA_Fonte_prev !== ULA_Fonte_expected_prev )
		&& ((ULA_Fonte_expected_prev !== last_ULA_Fonte_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Fonte :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Fonte_expected_prev);
		$display ("     Real value = %b", ULA_Fonte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_ULA_Fonte_exp = ULA_Fonte_expected_prev;
	end
	if (
		( ULA_Operation_expected_prev[0] !== 1'bx ) && ( ULA_Operation_prev[0] !== ULA_Operation_expected_prev[0] )
		&& ((ULA_Operation_expected_prev[0] !== last_ULA_Operation_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Operation_expected_prev);
		$display ("     Real value = %b", ULA_Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ULA_Operation_exp[0] = ULA_Operation_expected_prev[0];
	end
	if (
		( ULA_Operation_expected_prev[1] !== 1'bx ) && ( ULA_Operation_prev[1] !== ULA_Operation_expected_prev[1] )
		&& ((ULA_Operation_expected_prev[1] !== last_ULA_Operation_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Operation_expected_prev);
		$display ("     Real value = %b", ULA_Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ULA_Operation_exp[1] = ULA_Operation_expected_prev[1];
	end
	if (
		( ULA_Operation_expected_prev[2] !== 1'bx ) && ( ULA_Operation_prev[2] !== ULA_Operation_expected_prev[2] )
		&& ((ULA_Operation_expected_prev[2] !== last_ULA_Operation_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Operation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Operation_expected_prev);
		$display ("     Real value = %b", ULA_Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_ULA_Operation_exp[2] = ULA_Operation_expected_prev[2];
	end
	if (
		( write_register_expected_prev[0] !== 1'bx ) && ( write_register_prev[0] !== write_register_expected_prev[0] )
		&& ((write_register_expected_prev[0] !== last_write_register_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_register[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_register_expected_prev);
		$display ("     Real value = %b", write_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_register_exp[0] = write_register_expected_prev[0];
	end
	if (
		( write_register_expected_prev[1] !== 1'bx ) && ( write_register_prev[1] !== write_register_expected_prev[1] )
		&& ((write_register_expected_prev[1] !== last_write_register_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_register[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_register_expected_prev);
		$display ("     Real value = %b", write_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_register_exp[1] = write_register_expected_prev[1];
	end
	if (
		( write_register_expected_prev[2] !== 1'bx ) && ( write_register_prev[2] !== write_register_expected_prev[2] )
		&& ((write_register_expected_prev[2] !== last_write_register_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_register[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_register_expected_prev);
		$display ("     Real value = %b", write_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_register_exp[2] = write_register_expected_prev[2];
	end
	if (
		( write_register_expected_prev[3] !== 1'bx ) && ( write_register_prev[3] !== write_register_expected_prev[3] )
		&& ((write_register_expected_prev[3] !== last_write_register_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_register[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_register_expected_prev);
		$display ("     Real value = %b", write_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_register_exp[3] = write_register_expected_prev[3];
	end
	if (
		( write_register_expected_prev[4] !== 1'bx ) && ( write_register_prev[4] !== write_register_expected_prev[4] )
		&& ((write_register_expected_prev[4] !== last_write_register_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_register[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_register_expected_prev);
		$display ("     Real value = %b", write_register_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_write_register_exp[4] = write_register_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] data_write_registrador;
reg sel_data_write;
// wires                                               
wire [31:0] dados_lido;
wire [31:0] data_write;
wire DvC;
wire DVI;
wire enable_opcode;
wire enable_PC;
wire enableInstrucao;
wire EscMem;
wire EscReg;
wire [3:0] estado;
wire [31:0] instrucao_atual;
wire LerMem;
wire MemParaReg;
wire [5:0] opcode_instrucao;
wire [31:0] PC_Novo;
wire [31:0] read_data_1;
wire [31:0] read_data_2;
wire [31:0] resultadoULA;
wire sel;
wire ULA_Fonte;
wire [2:0] ULA_Operation;
wire [4:0] write_register;

wire sampler;                             

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dados_lido(dados_lido),
	.data_write(data_write),
	.data_write_registrador(data_write_registrador),
	.DvC(DvC),
	.DVI(DVI),
	.enable_opcode(enable_opcode),
	.enable_PC(enable_PC),
	.enableInstrucao(enableInstrucao),
	.EscMem(EscMem),
	.EscReg(EscReg),
	.estado(estado),
	.instrucao_atual(instrucao_atual),
	.LerMem(LerMem),
	.MemParaReg(MemParaReg),
	.opcode_instrucao(opcode_instrucao),
	.PC_Novo(PC_Novo),
	.read_data_1(read_data_1),
	.read_data_2(read_data_2),
	.resultadoULA(resultadoULA),
	.sel(sel),
	.sel_data_write(sel_data_write),
	.ULA_Fonte(ULA_Fonte),
	.ULA_Operation(ULA_Operation),
	.write_register(write_register)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// sel_data_write
initial
begin
	sel_data_write = 1'b1;
	sel_data_write = #250000 1'b0;
end 
// data_write_registrador[ 31 ]
initial
begin
	data_write_registrador[31] = 1'b0;
end 
// data_write_registrador[ 30 ]
initial
begin
	data_write_registrador[30] = 1'b0;
end 
// data_write_registrador[ 29 ]
initial
begin
	data_write_registrador[29] = 1'b0;
end 
// data_write_registrador[ 28 ]
initial
begin
	data_write_registrador[28] = 1'b0;
end 
// data_write_registrador[ 27 ]
initial
begin
	data_write_registrador[27] = 1'b0;
end 
// data_write_registrador[ 26 ]
initial
begin
	data_write_registrador[26] = 1'b0;
end 
// data_write_registrador[ 25 ]
initial
begin
	data_write_registrador[25] = 1'b0;
end 
// data_write_registrador[ 24 ]
initial
begin
	data_write_registrador[24] = 1'b0;
end 
// data_write_registrador[ 23 ]
initial
begin
	data_write_registrador[23] = 1'b0;
end 
// data_write_registrador[ 22 ]
initial
begin
	data_write_registrador[22] = 1'b0;
end 
// data_write_registrador[ 21 ]
initial
begin
	data_write_registrador[21] = 1'b0;
end 
// data_write_registrador[ 20 ]
initial
begin
	data_write_registrador[20] = 1'b0;
end 
// data_write_registrador[ 19 ]
initial
begin
	data_write_registrador[19] = 1'b0;
end 
// data_write_registrador[ 18 ]
initial
begin
	data_write_registrador[18] = 1'b0;
end 
// data_write_registrador[ 17 ]
initial
begin
	data_write_registrador[17] = 1'b0;
end 
// data_write_registrador[ 16 ]
initial
begin
	data_write_registrador[16] = 1'b0;
end 
// data_write_registrador[ 15 ]
initial
begin
	data_write_registrador[15] = 1'b0;
end 
// data_write_registrador[ 14 ]
initial
begin
	data_write_registrador[14] = 1'b0;
end 
// data_write_registrador[ 13 ]
initial
begin
	data_write_registrador[13] = 1'b0;
end 
// data_write_registrador[ 12 ]
initial
begin
	data_write_registrador[12] = 1'b0;
end 
// data_write_registrador[ 11 ]
initial
begin
	data_write_registrador[11] = 1'b0;
end 
// data_write_registrador[ 10 ]
initial
begin
	data_write_registrador[10] = 1'b0;
end 
// data_write_registrador[ 9 ]
initial
begin
	data_write_registrador[9] = 1'b0;
end 
// data_write_registrador[ 8 ]
initial
begin
	data_write_registrador[8] = 1'b0;
end 
// data_write_registrador[ 7 ]
initial
begin
	data_write_registrador[7] = 1'b0;
end 
// data_write_registrador[ 6 ]
initial
begin
	data_write_registrador[6] = 1'b0;
end 
// data_write_registrador[ 5 ]
initial
begin
	data_write_registrador[5] = 1'b0;
end 
// data_write_registrador[ 4 ]
initial
begin
	data_write_registrador[4] = 1'b0;
end 
// data_write_registrador[ 3 ]
initial
begin
	data_write_registrador[3] = 1'b0;
end 
// data_write_registrador[ 2 ]
initial
begin
	data_write_registrador[2] = 1'b0;
end 
// data_write_registrador[ 1 ]
initial
begin
	data_write_registrador[1] = 1'b0;
end 
// data_write_registrador[ 0 ]
initial
begin
	data_write_registrador[0] = 1'b1;
end 

Processador_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_write_registrador(data_write_registrador),
	.sel_data_write(sel_data_write),
	.sampler_tx(sampler)
);

Processador_vlg_check_tst tb_out(
	.dados_lido(dados_lido),
	.data_write(data_write),
	.DvC(DvC),
	.DVI(DVI),
	.enable_opcode(enable_opcode),
	.enable_PC(enable_PC),
	.enableInstrucao(enableInstrucao),
	.EscMem(EscMem),
	.EscReg(EscReg),
	.estado(estado),
	.instrucao_atual(instrucao_atual),
	.LerMem(LerMem),
	.MemParaReg(MemParaReg),
	.opcode_instrucao(opcode_instrucao),
	.PC_Novo(PC_Novo),
	.read_data_1(read_data_1),
	.read_data_2(read_data_2),
	.resultadoULA(resultadoULA),
	.sel(sel),
	.ULA_Fonte(ULA_Fonte),
	.ULA_Operation(ULA_Operation),
	.write_register(write_register),
	.sampler_rx(sampler)
);
endmodule

